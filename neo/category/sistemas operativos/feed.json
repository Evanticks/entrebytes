{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"sistemas operativos\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/01/03/nfs-systemd/",
            "url": "http://example.com/2023/01/03/nfs-systemd/",
            "title": "Montaje de volumen nfs a partir de systemd",
            "date_published": "2023-01-03T13:43:02.309Z",
            "content_html": "<p><img src=\"/images/systemd-title.jpg\" alt=\"status\"></p>\n<p>Vamos a empezar en la máquina servidor, que en nuestro caso será alfa, actualizamos el sistema e instalamos los paquetes necesarios para la instalación nfs en la máquina servidora que en nuestro caso será alfa.</p>\n<pre><code>apt install nfs-kernel-server nfs-common\n</code></pre>\n<p>Tras esto vamos a ingresar el nuevo volumen, en el escenario podría ser tanto físico como virtualizado, pero antes de realizar la configuración de systemd necesitaremos darle formato al sistema de archivos, que en nuestro caso será ext4.</p>\n<p><code>mkfs.ext4 /dev/vdb</code></p>\n<p>Una vez hecho esto podemos crear el archivo en &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;srv-compartida.mount, es necesario que pongamos la ruta en la que va a estar la carpeta compartida a partir de ‘-‘ en vez de ‘&#x2F;‘ en el nombre del fichero a crear, .mount indica a systemd que es un archivo de montaje.</p>\n<p>Ahora vamos a ver la sintaxis del archivo:</p>\n<pre><code>[Unit]\nDescription= volumen que va a ser montado para compartir nfs\n\n[Mount]\nWhat= /dev/vdb\nWhere= /srv/compartida/\nType=ext4\nOptions=defaults\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>En [Unit] podemos poner la descripción de lo que va a realizar el servicio<br>En [Mount] es como una forma diferente de poner una línea del fstab, ya que se especifica el qué se va a montar, donde se va a montar, el tipo de archivo que va a ser y sus propias opciones de montaje.<br>En [Install] especificamos los usuarios a los que va a ser dirigido este servicio.</p>\n<p>Una vez hecho esto vamos a ejecutar <code>systemctl enable srv-compartida.mount</code> para activar el servicio permanentemente y <code>systemctl start srv-compartida.mount</code> para iniciarlo.</p>\n<p>Tras esto si hacemos systemctl status srv-compartida podemos ver que está activo el servicio</p>\n<p><img src=\"/images/systemd-1.png\" alt=\"status\"></p>\n<p>Ahora vamos a configurar el servidor nfs, en el cual debemos escribir la siguiente línea en el archivo de &#x2F;etc&#x2F;exports, pero antes debe estar creada la carpeta compartida.</p>\n<p><code>/srv/compartida 172.16.0.200(rw,sync,no_subtree_check,all_squash)</code></p>\n<p>luego ejecutamos <code>exportfs -a</code> para que el servicio nfs lea el fichero de &#x2F;etc&#x2F;exports.</p>\n<p>Ahora vamos a pasar a la máquina cliente:</p>\n<p>crearemos la carpeta en &#x2F;srv&#x2F;nfs y escribiremos en el archivo de &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;srv-nfs.mount lo siguiente:</p>\n<pre><code>[Unit]\nDescription= Montaje de carpeta compartida NFS  \n\n[Mount]\nWhat=172.16.0.1:/srv/compartida\nWhere=/srv/nfs\nType=nfs\nOptions=defaults\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>Y tras esto:</p>\n<pre><code>systemctl enable srv-nfs.mount\nsystemctl start srv-nfs.mount\n</code></pre>\n<p>Ahora podemos comprobar que el servicio permanece activo:</p>\n<p><img src=\"/images/systemd-2.png\" alt=\"status\"></p>\n<p>Y vemos con un archivo de prueba que el servidor nfs funciona:</p>\n<p><img src=\"/images/systemd-3.png\" alt=\"nfs\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/16/Compilar-linux-a-medida/",
            "url": "http://example.com/2022/11/16/Compilar-linux-a-medida/",
            "title": "Configurar kernel a medida",
            "date_published": "2022-11-16T21:49:54.792Z",
            "content_html": "<p><img src=\"/images/linux-6.0.jpg\" alt=\"Descripción de la imagen\"></p>\n<p>Comenzaremos creando una carpeta que nos sirva de entorno de trabajo</p>\n<p><code>mkdir kernel &amp;&amp; cd kernel</code></p>\n<p>Instalamos las dependencias que nos ayudarán a compilar el kernel, el cual nos ahorrará errores en la compilación:</p>\n<p><code>sudo apt install build-essential flex nbison openssl libssl-dev dkms libncurses-dev ncurses-dev qtbase5-dev libelf-dev</code></p>\n<p>Nos vamos ahora a kernel.org a descargarnos la última versión del kernel de linux.</p>\n<p>Una vez descargado el kernel lo descomprimimos con el comando tar -xvf linux-6.0.7.tar.gz, ingresamos dentro y vemos que entre muchos archivos, encontramos un makefile, entramos dentro y encontraremos el archivo EXTRAVERSION, el cual pondremos una versión para poder llevar un control de versiones.</p>\n<p>Entramos dentro del directorio descomprimido y procedemos a generar el <code>make oldconfig</code> que creará el archivo .config con los módulos que deberemos compilar, intentamos contestar a las preguntas de forma negativa para que no genere módulos opcionales.</p>\n<p>Una vez hecho esto debemos de adaptar los módulos que está utilizando nuestra máquina para compilar el kernel a medida, entonces utilizaremos un <code>make localyesconfig</code></p>\n<pre><code>╭─antonio@debian ~/Programas/kernel/linux-6.0.7  \n╰─➤  egrep &#39;=y&#39; .config | wc -l                                                                                                 130 ↵\n1934\n╭─antonio@debian ~/Programas/kernel/linux-6.0.7  \n╰─➤  egrep &#39;=m&#39; .config | wc -l\n3\n</code></pre>\n<p>Una vez hecho esto procederemos a probar nuestro kernel a medida <code>make -j8 bindeb-pkg</code> pudiendo así compilar el kernel, le otorgaremos 8 jobs y si agregamos un time <code>time make -j8 bindeb-pkg</code> podemos ver la duración que ha tardado el sistema en compilarlo.</p>\n<p>Reiniciamos nuestra máquina y entramos en el nuevo kernel, utilizamos <code>uname -r</code></p>\n<p>Luego volvemos a nuestro kernel, y en concreto a nuestro espacio de trabajo, ejecutamos un <code>make clean</code> para eliminar los ‘residuos’ generados tras al compilación, y hacemos un control de versiones del .config, como nos funcionó la primera versión realizamos un <code>cp .config ../v1.config</code></p>\n<p><img src=\"/images/xconfig.png\" alt=\"Descripción de la imagen\"></p>\n",
            "tags": [
                "Sistemas Operativos"
            ]
        },
        {
            "id": "http://example.com/2022/10/04/Preseed-pxe/",
            "url": "http://example.com/2022/10/04/Preseed-pxe/",
            "title": "Instalación preseed PXE+APACHE",
            "date_published": "2022-10-04T19:21:24.436Z",
            "content_html": "<p>Vamos a crear la máquina virtual como hicimos anteriormente en <a href=\"https://entrebytes.neocities.org/2022/09/30/preseed/\">Instalación automatizada basada en medio de almacenamiento extraíble.</a></p>\n<p>En vagrant creamos una máquina que tenga una ip estática 192.168.100.3 que va a ser la tarjeta de red por la que funcionará pxe, en mi caso no creó esa ip y la tuve que escribir a mano en el &#x2F;etc&#x2F;network&#x2F;interfaces, la otra tarjeta de red es la de vagrant-libvirt que será la que nos conecte al exterior.</p>\n<p>Para proceder a configurar el protocolo <strong>TFTP</strong> Y <strong>DHCP</strong> para que sea el host el que conceda ip a la máquina y establezca la conexión al preseed, utilizando dnsmasq</p>\n<p>apt install dnsmasq</p>\n<p>Establecemos en el fichero &#x2F;etc&#x2F;dnsmaq.conf con los siguientes parámetros:</p>\n<p><code>dhcp-range=192.168.100.100,192.168.100.200,255.255.255.0</code></p>\n<p>Establecemos el fichero con  el que va a bootear el dhcp:</p>\n<p><code>dhcp-boot=pxelinux.0</code></p>\n<p>Habilitamos el tftp:<br><code>enable-tftp</code></p>\n<p>Establecemos una ruta donde va a albergar nuestro Debian:<br><code>tftp-root=/srv/tftp</code></p>\n<p>Creamos la carpeta en &#x2F;srv<br><code>sudo mkdir /srv/tftp</code></p>\n<p>a continuación instalamos el wget y lo usamos en &#x2F;srv&#x2F;tftp</p>\n<p><code>wget http://ftp.debian.org/debian/dists/bullseye/main/installer-amd64/current/images/netboot/netboot.tar.gz </code></p>\n<p><code>tar -zxf netboot.tar.gz</code> (para descomprimir los archivos)<br><code>rm netboot.tar.gz</code></p>\n<p><code>srv/tftp/debian-installer/amd64/boot-screens/txt.cfg</code></p>\n<p>En este fichero de configuración utilizamos los siguientes parámetros:</p>\n<pre><code>label install\n        menu label ^Install\n        kernel debian-installer/amd64/linux\n        append vga=788 initrd=debian-installer/amd64/initrd.gz --- quiet\nlabel unattended-gnome\n        menu label ^Instalacion Debian Desatendida Preseed\n        kernel debian-installer/amd64/linux\n        append vga=788 initrd=debian-installer/amd64/initrd.gz hostname=preseed domain=preseed preseed/url=192.168.100.5/preseed.cfg locale=en_US.UTF-8 console-setup/charmap=UTF-8 console-setup/ask_detect=false keyboard-configuration/xkb-keymap=us --\n</code></pre>\n<p>En este label he puesto la url del servidor apache que vamos a utilizar, para que descargue el preseed y lo inyecte en la instalación.</p>\n<p>Instalamos apache2:<br><code>sudo apt install apache2</code></p>\n<p>luego copiamos el preseed, lo ponemos en <code>/var/www/html/</code> junto al index.html, hacemos la página HTML que albergue el preseed y la ruta ya está establecida en el txt.cfg</p>\n<p>Una vez hecho esto, para que nuestra máquina que se conecta a la tarjeta de red estática que hemos creado, necesitamos establecer unas reglas de nftables que nos ayudará a conseguir que la máquina que conecte con el servidor pxe salga al exterior para descargar las dependencias.</p>\n<p>Para ello, debemos activar el bit de forwarding que se halla en <code>/etc/sysctl.conf</code> y descomentamos <code>#net.ipv4.ip_forward=1</code></p>\n<p>Instalamos y habilitamos nftables(Todo esto siendo root):</p>\n<p><code>apt install nftables</code><br><code>systemctl start nftables.service</code><br><code>systemctl enable nftables.service</code><br><code>nft add table nat</code><br><code>nft list tables</code></p>\n<p>ahora realizamos las reglas de nftables para conseguir que esas máquinas tengan internet:<br><code>nft add chain nat postrouting &#123; type nat hook postrouting priority 100 \\; &#125;</code><br><code>nft add rule ip nat postrouting oifname &quot;eth0&quot; ip saddr 192.168.100.0/24 counter masquerade</code></p>\n<p>Ahora guardamos los cambios: <code>nft list ruleset &gt; /etc/nftables.conf</code></p>\n<p>Ahora en virt-manager procedemos a crear y enlazar una máquina a una red aislada:</p>\n<pre><code>&lt;network connections=&quot;2&quot;&gt;\n  &lt;name&gt;red_muy_aislada&lt;/name&gt;\n  &lt;uuid&gt;b0083374-5cb6-4a8d-bd3c-32cf0d870b54&lt;/uuid&gt;\n  &lt;bridge name=&quot;virbr3&quot; stp=&quot;on&quot; delay=&quot;0&quot;/&gt;\n  &lt;mac address=&quot;52:54:00:e9:be:50&quot;/&gt;\n&lt;/network&gt;\n</code></pre>\n<p> debemos arrancarla por red como prioridad, luego de esto funcionará perfectamente nuestra instalación desatendida.</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/30/preseed/",
            "url": "http://example.com/2022/09/30/preseed/",
            "title": "Instalación automatizada basada en medio de almacenamiento extraíble.",
            "date_published": "2022-09-30T07:12:30.816Z",
            "content_html": "<p>He comenzado descargando el archivo iso para poder abrirlo y colocar el preseed en él, el comando que he utilizado es xorriso.<br>Tras esto he utilizado una plantilla de la web de debian</p>\n<p><a href=\"https://www.debian.org/releases/buster/example-preseed.txt\">https://www.debian.org/releases/buster/example-preseed.txt</a></p>\n<p>Tras esto he estado configurando preseed.cfg para poner la hora, el país y el teclado en español y resulta que estuve un tiempo estancado en esto porque hay que corroborar los cambios en el archivo isofiles&#x2F;isolinux&#x2F;txt.cfg<br>A su vez también debemos indicar la ruta donde vama a estar el preseed para que el sistema lo localice, en mi caso estará en la raíz de la ISO (CDROM)</p>\n<pre><code>label install\n        menu label ^Install\n        kernel /install.amd/vmlinuz\n        append vga=788 initrd=/install.amd/initrd.gz --- quiet\nlabel unattended-gnome\n menu label ^Instalación Debian Desatendida Preseed Antonio\n kernel /install.amd/gtk/vmlinuz\n append vga=788 initrd=/install.amd/gtk/initrd.gz preseed/file=/cdrom/preseed.cfg locale=es_ES console-setup/ask_detect=false keyboard-configuration/xkb-keymap=es\n</code></pre>\n<p>Al tener que desensamblar y ensamblar constantemente el iso para poner el preseed actualizado llegó un momento en el que se hacía inviable seguir probando sin hacer un script con los pasos que se repetían, entonces lo realicé:</p>\n<pre><code>#!/usr/bin/env bash\nfichero=/home/antonio/Descargas/preseed-instalacion/preseed-debian-10.1.0-amd64-script-netinst.iso\nchmod u+w isofiles\ncp preseed.cfg ~/Descargas/preseed-instalacion/isofiles\nchmod u-w isofiles\ncd ~/Descargas/preseed-instalacion\nchmod a+w isofiles/isolinux/isolinux.bin\nif [ -f $fichero ]\nthen\n        rm -f $fichero\nfi      \ngenisoimage -r -J -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o preseed-debian-10&gt;\n</code></pre>\n<p>Tuve que meter la condición de que si el iso creado existía lo borrara porque al ejecutar genisoimage si el nombre ya existe provoca conflictos.</p>\n<p>Entonces estuve probando, metiendo el usuario de la máquina con la contraseña sin encriptar, para ver el funcionamiento y que lo anterior configurado fuese por buen camino.</p>\n<p>Estuve probando formas de encriptar la contraseña, la plantilla me recomendaba que usara  <strong>Crypt 3</strong> pero es un método muy vulnerable, así que mirando la documentación vi que podía meter un hash <strong>md5</strong>.</p>\n<p>Entonces empecé a encriptar la contraseña, para ello utilicé <code>mkpasswd -m sha-512</code> el cual al ingresar la contraseña me la devuelve encriptada, activo la opción de <code>d-i passwd/user-password-crypted password</code> junto con la contraseña encriptada</p>\n<p>Ya entonces, con la localización y el teclado en español, la cuenta del usuario con su contraseña encriptada decido comenzar a realizar las particiones de lvm.<br>Tuve muchísimos errores de sintaxis pero gracias al script podía probar de manera más rápida las diferentes combinaciones de particionado y ajustando la sintaxis conseguí realizarlo:</p>\n<p><img src=\"/images/ASO-PRACTICA1.png\" alt=\"Descripción de la imagen\"></p>\n",
            "tags": []
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"bases de datos\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/12/07/plsql_basico/",
            "url": "http://example.com/2022/12/07/plsql_basico/",
            "title": "Procedimientos en Oracle y Postgres",
            "date_published": "2022-12-07T01:39:06.680Z",
            "content_html": "<p><img src=\"/images/oraclepostgres.jpg\" alt=\"remoto\"></p>\n<h2 id=\"ORACLE\"><a href=\"#ORACLE\" class=\"headerlink\" title=\"ORACLE\"></a>ORACLE</h2><p>Comenzaremos adjuntando el script de creación de tablas e inserciones de Oracle:</p>\n<pre><code class=\"sql\">CREATE TABLE DEPT\n(\n DEPTNO NUMBER(2),\n DNAME VARCHAR2(14),\n LOC VARCHAR2(13),\n CONSTRAINT PK_DEPT PRIMARY KEY (DEPTNO)\n);\nCREATE TABLE EMP\n(\n EMPNO NUMBER(4),\n ENAME VARCHAR2(10),\n JOB VARCHAR2(9),\n MGR NUMBER(4),\n HIREDATE DATE,\n SAL NUMBER(7, 2),\n COMM NUMBER(7, 2),\n DEPTNO NUMBER(2),\n CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTNO) REFERENCES DEPT (DEPTNO),\n CONSTRAINT PK_EMP PRIMARY KEY (EMPNO)\n);\nINSERT INTO DEPT VALUES (10, &#39;ACCOUNTING&#39;, &#39;NEW YORK&#39;);\nINSERT INTO DEPT VALUES (20, &#39;RESEARCH&#39;, &#39;DALLAS&#39;);\nINSERT INTO DEPT VALUES (30, &#39;SALES&#39;, &#39;CHICAGO&#39;);\nINSERT INTO DEPT VALUES (40, &#39;OPERATIONS&#39;, &#39;BOSTON&#39;);\nINSERT INTO EMP VALUES(7369, &#39;SMITH&#39;, &#39;CLERK&#39;, 7902,TO_DATE(&#39;17-DIC-1980&#39;, &#39;DD-MON-YYYY&#39;), 800, NULL, 20);\nINSERT INTO EMP VALUES(7499, &#39;ALLEN&#39;, &#39;SALESMAN&#39;, 7698,TO_DATE(&#39;20-FEB-1981&#39;, &#39;DD-MON-YYYY&#39;), 1600, 300, 30);\nINSERT INTO EMP VALUES(7521, &#39;WARD&#39;, &#39;SALESMAN&#39;, 7698,TO_DATE(&#39;22-FEB-1981&#39;, &#39;DD-MON-YYYY&#39;), 1250, 500, 30);\nINSERT INTO EMP VALUES(7566, &#39;JONES&#39;, &#39;MANAGER&#39;, 7839,TO_DATE(&#39;2-ABR-1981&#39;, &#39;DD-MON-YYYY&#39;), 2975, NULL, 20);\nINSERT INTO EMP VALUES(7654, &#39;MARTIN&#39;, &#39;SALESMAN&#39;, 7698,TO_DATE(&#39;28-SEP-1981&#39;, &#39;DD-MON-YYYY&#39;), 1250, 1400, 30);\nINSERT INTO EMP VALUES(7698, &#39;BLAKE&#39;, &#39;MANAGER&#39;, 7839,TO_DATE(&#39;1-MAY-1981&#39;, &#39;DD-MON-YYYY&#39;), 2850, NULL, 30);\nINSERT INTO EMP VALUES(7782, &#39;CLARK&#39;, &#39;MANAGER&#39;, 7839,TO_DATE(&#39;9-JUN-1981&#39;, &#39;DD-MON-YYYY&#39;), 2450, NULL, 10);\nINSERT INTO EMP VALUES(7788, &#39;SCOTT&#39;, &#39;ANALYST&#39;, 7566,TO_DATE(&#39;09-DIC-1982&#39;, &#39;DD-MON-YYYY&#39;), 3000, NULL, 20);\nINSERT INTO EMP VALUES(7839, &#39;KING&#39;, &#39;PRESIDENT&#39;, NULL,TO_DATE(&#39;17-NOV-1981&#39;, &#39;DD-MON-YYYY&#39;), 5000, NULL, 10);\nINSERT INTO EMP VALUES(7844, &#39;TURNER&#39;, &#39;SALESMAN&#39;, 7698,TO_DATE(&#39;8-SEP-1981&#39;, &#39;DD-MON-YYYY&#39;), 1500, 0, 30);\nINSERT INTO EMP VALUES(7876, &#39;ADAMS&#39;, &#39;CLERK&#39;, 7788,TO_DATE(&#39;12-ENE-1983&#39;, &#39;DD-MON-YYYY&#39;), 1100, NULL, 20);\nINSERT INTO EMP VALUES(7900, &#39;JAMES&#39;, &#39;CLERK&#39;, 7698,TO_DATE(&#39;3-DIC-1981&#39;, &#39;DD-MON-YYYY&#39;), 950, NULL, 30);\nINSERT INTO EMP VALUES(7902, &#39;FORD&#39;, &#39;ANALYST&#39;, 7566,TO_DATE(&#39;3-DIC-1981&#39;, &#39;DD-MON-YYYY&#39;), 3000, NULL, 20);\nINSERT INTO EMP VALUES(7934, &#39;MILLER&#39;, &#39;CLERK&#39;, 7782,TO_DATE(&#39;23-ENE-1982&#39;, &#39;DD-MON-YYYY&#39;), 1300, NULL, 10);\n\nCOMMIT;\n</code></pre>\n<h3 id=\"1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082\"><a href=\"#1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082\" class=\"headerlink\" title=\"1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082\"></a>1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082</h3><pre><code class=\"sql\">create or replace procedure mostrar_7082\nIS\n    v_nombre emp.ename%type;\n    v_sal emp.sal%type;\nBEGIN\n    select ename,sal into v_nombre,v_sal \n    from emp\n    where empno= 7782;\n    dbms_output.put_line(&#39;El nombre del empleado 7082 es &#39; || v_nombre || &#39; y su salario es &#39; || v_sal );\nEND;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio1.png\" alt=\"remoto\"></p>\n<h3 id=\"2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre\"><a href=\"#2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre\" class=\"headerlink\" title=\"2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre\"></a>2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre</h3><pre><code class=\"sql\">Create or replace procedure codigoanombreemp (p_codempleado emp.empno%type)\nIS\n    v_nombre emp.ename%type;\nBEGIN\n    select ename into v_nombre from emp where empno=p_codempleado;\n    dbms_output.put_line (&#39;El empleado con el código &#39; || p_codempleado || &#39; es &#39; || v_nombre);\nEND;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio2.png\" alt=\"remoto\"></p>\n<h3 id=\"3-Hacer-un-procedimiento-que-devuelva-los-nombres-de-los-tres-empleados-mas-antiguos\"><a href=\"#3-Hacer-un-procedimiento-que-devuelva-los-nombres-de-los-tres-empleados-mas-antiguos\" class=\"headerlink\" title=\"3. Hacer un procedimiento que devuelva los nombres de los tres empleados más antiguos\"></a>3. Hacer un procedimiento que devuelva los nombres de los tres empleados más antiguos</h3><pre><code class=\"sql\">create or replace procedure tresempleadosmasantiguos\nIS\ncursor c_empleados is\nselect ename from emp WHERE ROWNUM &lt;= 3 order by hiredate asc;\nBEGIN\nFOR v_empleados in c_empleados loop\n    dbms_output.put_line (v_empleados.ename);\nend loop;\nEND;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio5.png\" alt=\"remoto\"></p>\n<h3 id=\"4-Hacer-un-procedimiento-que-reciba-el-nombre-de-un-tablespace-y-muestre-los-nombres-de-los-usuarios-que-lo-tienen-como-tablespace-por-defecto-Vista-DBA-USERS\"><a href=\"#4-Hacer-un-procedimiento-que-reciba-el-nombre-de-un-tablespace-y-muestre-los-nombres-de-los-usuarios-que-lo-tienen-como-tablespace-por-defecto-Vista-DBA-USERS\" class=\"headerlink\" title=\"4. Hacer un procedimiento que reciba el nombre de un tablespace y muestre los nombres de los usuarios que lo tienen como tablespace por defecto (Vista DBA_USERS)\"></a>4. Hacer un procedimiento que reciba el nombre de un tablespace y muestre los nombres de los usuarios que lo tienen como tablespace por defecto (Vista DBA_USERS)</h3><pre><code class=\"sql\">create or replace procedure tablespacedefecto (p_tablespace DBA_USERS.DEFAULT_TABLESPACE%type)\nIS\ncursor c_tablespace is\nSELECT USERNAME from DBA_USERS where DEFAULT_TABLESPACE=p_tablespace;\nBEGIN\nFOR v_usuarios in c_tablespace loop\n    dbms_output.put_line (v_usuarios.USERNAME);\nend loop;\nEND;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio3.png\" alt=\"remoto\"></p>\n<h3 id=\"5-Modificar-el-procedimiento-anterior-para-que-haga-lo-mismo-pero-devolviendo-el-numero-de-usuarios-que-tienen-ese-tablespace-como-tablespace-por-defecto-Nota-Hay-que-convertir-el-procedimiento-en-funcion\"><a href=\"#5-Modificar-el-procedimiento-anterior-para-que-haga-lo-mismo-pero-devolviendo-el-numero-de-usuarios-que-tienen-ese-tablespace-como-tablespace-por-defecto-Nota-Hay-que-convertir-el-procedimiento-en-funcion\" class=\"headerlink\" title=\"5. Modificar el procedimiento anterior para que haga lo mismo pero devolviendo el número de usuarios que tienen ese tablespace como tablespace por defecto. Nota: Hay que convertir el procedimiento en función\"></a>5. Modificar el procedimiento anterior para que haga lo mismo pero devolviendo el número de usuarios que tienen ese tablespace como tablespace por defecto. Nota: Hay que convertir el procedimiento en función</h3><pre><code class=\"sql\">create or replace function tablespacedefecto (p_tablespace DBA_USERS.DEFAULT_TABLESPACE%type)\nreturn number\nIS\nv_num number (4);\nBEGIN\nSELECT count(USERNAME) into v_num from DBA_USERS where DEFAULT_TABLESPACE=p_tablespace;\nreturn v_num;\nEND;\n/\n\ncreate or replace procedure mostrarfunciontablespacedefecto (p_tablespace DBA_USERS.DEFAULT_TABLESPACE%type)\nis\nv_num number;\nBEGIN\n    v_num:=tablespacedefecto(p_tablespace);\n    dbms_output.put_line (&#39;El tablespace &#39; || p_tablespace || &#39; lo tienen &#39; || v_num || &#39; usuarios.&#39;);\nend;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio4.png\" alt=\"remoto\"></p>\n<h3 id=\"6-Hacer-un-procedimiento-llamado-mostrar-usuarios-por-tablespace-que-muestre-por-pantalla-un-listado-de-los-tablespaces-existentes-con-la-lista-de-usuarios-de-cada-uno-y-el-numero-de-los-mismos-asi-Vistas-DBA-TABLESPACES-y-DBA-USERS\"><a href=\"#6-Hacer-un-procedimiento-llamado-mostrar-usuarios-por-tablespace-que-muestre-por-pantalla-un-listado-de-los-tablespaces-existentes-con-la-lista-de-usuarios-de-cada-uno-y-el-numero-de-los-mismos-asi-Vistas-DBA-TABLESPACES-y-DBA-USERS\" class=\"headerlink\" title=\"6. Hacer un procedimiento llamado mostrar_usuarios_por_tablespace que muestre por pantalla un listado de los tablespaces existentes con la lista de usuarios de cada uno y el número de los mismos, así: (Vistas DBA_TABLESPACES y DBA_USERS)\"></a>6. Hacer un procedimiento llamado mostrar_usuarios_por_tablespace que muestre por pantalla un listado de los tablespaces existentes con la lista de usuarios de cada uno y el número de los mismos, así: (Vistas DBA_TABLESPACES y DBA_USERS)</h3><p>En  este ejercicio en concreto utilizaremos una función creada en el anterior ejercicio para este propósito.</p>\n<pre><code class=\"sql\">create or replace procedure mostrar_usuarios_por_tablespace\nis\ncursor c_tablespace is\nselect DISTINCT DEFAULT_TABLESPACE from DBA_USERS;\nBEGIN\nfor v_tablespace in c_tablespace loop\ndbms_output.put_line(&#39;Tablespace &#39; || v_tablespace.DEFAULT_TABLESPACE || &#39;:&#39;);\nMOSTRARUSUARIOS(v_tablespace.DEFAULT_TABLESPACE);\ndbms_output.put_line(&#39;Total Usuarios Tablespace &#39;|| v_tablespace.DEFAULT_TABLESPACE || &#39;: &#39; || tablespacedefecto(v_tablespace.DEFAULT_TABLESPACE));\nend loop;\nend;\n/\n\n\nCREATE OR REPLACE PROCEDURE MOSTRARUSUARIOS (p_tablespace in out varchar2)\nis\ncursor c_nombre is\nselect USERNAME FROM DBA_USERS WHERE DEFAULT_TABLESPACE=p_tablespace;\nBEGIN\nFOR v_nombre in c_nombre loop\n    dbms_output.put_line(&#39;Usuario &#39; || v_nombre.USERNAME );\nend loop;\nend;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio6.png\" alt=\"remoto\"></p>\n<h3 id=\"7-Hacer-un-procedimiento-llamado-mostrar-codigo-fuente-que-reciba-el-nombre-de-otro-procedimiento-y-muestre-su-codigo-fuente-DBA-SOURCE\"><a href=\"#7-Hacer-un-procedimiento-llamado-mostrar-codigo-fuente-que-reciba-el-nombre-de-otro-procedimiento-y-muestre-su-codigo-fuente-DBA-SOURCE\" class=\"headerlink\" title=\"7. Hacer un procedimiento llamado mostrar_codigo_fuente  que reciba el nombre de otro procedimiento y muestre su código fuente. (DBA_SOURCE)\"></a>7. Hacer un procedimiento llamado mostrar_codigo_fuente  que reciba el nombre de otro procedimiento y muestre su código fuente. (DBA_SOURCE)</h3><pre><code class=\"sql\">create or replace procedure mostrar_codigo_fuente (p_procedimiento varchar2)\nIS\ncursor c_fuente is\nselect text from DBA_SOURCE where NAME=p_procedimiento;\nBEGIN\nFOR v_fuente in c_fuente loop\n    dbms_output.put_line(v_fuente.text);\nend loop;\nend;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio7.png\" alt=\"remoto\"></p>\n<h3 id=\"8-Hacer-un-procedimiento-llamado-mostrar-privilegios-usuario-que-reciba-el-nombre-de-un-usuario-y-muestre-sus-privilegios-de-sistema-y-sus-privilegios-sobre-objetos-DBA-SYS-PRIVS-y-DBA-TAB-PRIVS\"><a href=\"#8-Hacer-un-procedimiento-llamado-mostrar-privilegios-usuario-que-reciba-el-nombre-de-un-usuario-y-muestre-sus-privilegios-de-sistema-y-sus-privilegios-sobre-objetos-DBA-SYS-PRIVS-y-DBA-TAB-PRIVS\" class=\"headerlink\" title=\"8. Hacer un procedimiento llamado mostrar_privilegios_usuario que reciba el nombre de un usuario y muestre sus privilegios de sistema y sus privilegios sobre objetos. (DBA_SYS_PRIVS y DBA_TAB_PRIVS)\"></a>8. Hacer un procedimiento llamado mostrar_privilegios_usuario que reciba el nombre de un usuario y muestre sus privilegios de sistema y sus privilegios sobre objetos. (DBA_SYS_PRIVS y DBA_TAB_PRIVS)</h3><pre><code class=\"sql\">CREATE OR REPLACE PROCEDURE mostrar_privilegios_usuario (p_usuario DBA_USERS.USERNAME%TYPE)\nis\ncursor c_sistema is\nSELECT GRANTEE,PRIVILEGE FROM DBA_SYS_PRIVS WHERE GRANTEE=p_usuario;\ncursor c_objeto is\nSELECT GRANTEE,PRIVILEGE FROM DBA_TAB_PRIVS WHERE GRANTEE=p_usuario;\nBEGIN\nFOR v_sistema in c_sistema loop\n    dbms_output.put_line(&#39;Privilegio de sistema: &#39; || v_sistema.PRIVILEGE);\nend loop;\nFOR v_objeto in c_objeto loop\n    dbms_output.put_line(&#39;Privilegiode objetos: &#39; || v_objeto.PRIVILEGE);\nend loop;\nEND;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio8.png\" alt=\"remoto\"></p>\n<h3 id=\"9-Realiza-un-procedimiento-llamado-listar-comisiones-que-nos-muestre-por-pantalla-un-listado-de-las-comisiones-de-los-empleados-agrupados-segun-la-localidad-donde-esta-ubicado-su-departamento-con-el-siguiente-formato\"><a href=\"#9-Realiza-un-procedimiento-llamado-listar-comisiones-que-nos-muestre-por-pantalla-un-listado-de-las-comisiones-de-los-empleados-agrupados-segun-la-localidad-donde-esta-ubicado-su-departamento-con-el-siguiente-formato\" class=\"headerlink\" title=\"9. Realiza un procedimiento llamado listar_comisiones que nos muestre por pantalla un listado de las comisiones de los empleados agrupados según la localidad donde está ubicado su departamento con el siguiente formato:\"></a>9. Realiza un procedimiento llamado listar_comisiones que nos muestre por pantalla un listado de las comisiones de los empleados agrupados según la localidad donde está ubicado su departamento con el siguiente formato:</h3><pre><code class=\"sql\">CREATE OR REPLACE PROCEDURE Listar_comisiones\nIS\ncursor c_localidad is\nselect dname,loc from dept;\nv_total number(5);\nBEGIN\nselect sum(comm) into v_total from emp; \nFOR v_localidad in c_localidad loop\n    dbms_output.put_line(&#39;Localidad: &#39; || v_localidad.loc);\n    dbms_output.put_line(&#39;Departamento: &#39; || v_localidad.dname);\n    MOSTRARCOMISIONES(v_localidad.loc);\nend loop;\ndbms_output.put_line(&#39;Total comisiones en la empresa es de: &#39; || v_total);\nexception\nWHEN NO_DATA_FOUND then\ndbms_output.put_line(&#39;Hay tablas vacías&#39;);\nend;\n/\n\nCREATE OR REPLACE PROCEDURE MOSTRARCOMISIONES (p_localidad in out varchar2)\nIS\ncursor c_comisiones is\nselect ename,comm from emp where deptno in (select deptno from dept where loc = p_localidad);\nv_total number(5);\nBEGIN\nselect sum(comm) into v_total from emp where deptno in  (select deptno from dept where loc = p_localidad);\nFOR v_empleado in c_comisiones loop\n    dbms_output.put_line(&#39;Empleado: &#39; || v_empleado.ename || &#39;..................&#39; || v_empleado.comm);\n    if v_empleado.comm &gt; 10000 then\n        raise_application_error(-20001,&#39;Hay algún empleado con más de 10.000 de comisión&#39;);\n    end if;\nend loop;\ndbms_output.put_line(&#39;Total comisiones departamento: &#39; || p_localidad || &#39; es de: &#39; || v_total);\nEND;\n/\n</code></pre>\n<p>Podemos ver en la imagen que se produce un raise ya que hay un usuario con más de 10.000 de comm.</p>\n<p><img src=\"/images/oracle-ejercicio9.png\" alt=\"remoto\"></p>\n<h3 id=\"10-Realiza-un-procedimiento-que-reciba-el-nombre-de-una-tabla-y-muestre-los-nombres-de-las-restricciones-que-tiene-a-que-columna-afectan-y-en-que-consisten-exactamente-DBA-TABLES-DBA-CONSTRAINTS-DBA-CONS-COLUMNS\"><a href=\"#10-Realiza-un-procedimiento-que-reciba-el-nombre-de-una-tabla-y-muestre-los-nombres-de-las-restricciones-que-tiene-a-que-columna-afectan-y-en-que-consisten-exactamente-DBA-TABLES-DBA-CONSTRAINTS-DBA-CONS-COLUMNS\" class=\"headerlink\" title=\"10. Realiza un procedimiento que reciba el nombre de una tabla y muestre los nombres de las restricciones que tiene, a qué columna afectan y en qué consisten exactamente. (DBA_TABLES, DBA_CONSTRAINTS, DBA_CONS_COLUMNS)\"></a>10. Realiza un procedimiento que reciba el nombre de una tabla y muestre los nombres de las restricciones que tiene, a qué columna afectan y en qué consisten exactamente. (DBA_TABLES, DBA_CONSTRAINTS, DBA_CONS_COLUMNS)</h3><pre><code class=\"sql\">SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION_VC FROM DBA_CONSTRAINTS WHERE TABLE_NAME=&#39;EQUIPAR&#39;;\nSELECT CONSTRAINT_NAME,COLUMN_NAME FROM DBA_CONS_COLUMNS WHERE TABLE_NAME = &#39;PERSONAJE&#39;;\n\nCREATE OR REPLACE PROCEDURE MOSTRARRESTRICCIONES (p_tabla varchar2)\nis\nv_tabla varchar2(50);\nBEGIN\nv_tabla:=p_tabla;\nMOSTRARCONSSYS (v_tabla);\nMOSTRARCONSTABS (v_tabla);\nend;\n/\n\nCREATE OR REPLACE PROCEDURE MOSTRARCONSSYS (p_tabla in out varchar2)\nIS\ncursor c_system is\nSELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION_VC FROM DBA_CONSTRAINTS WHERE TABLE_NAME=p_tabla;\nBEGIN\nFOR v_system in c_system loop\n    dbms_output.put_line(v_system.CONSTRAINT_NAME || &#39;Tipo de restricción: &#39; || v_system.CONSTRAINT_TYPE || v_system.SEARCH_CONDITION_VC);\nend loop;\nEND;\n/\n\n\nCREATE OR REPLACE PROCEDURE MOSTRARCONSTABS (p_tabla in out varchar2)\nIS\ncursor c_tabs is\nSELECT CONSTRAINT_NAME,COLUMN_NAME FROM DBA_CONS_COLUMNS WHERE TABLE_NAME = p_tabla;\nBEGIN\nFOR v_tabs in c_tabs loop\n    dbms_output.put_line(&#39;Restricción: &#39; || v_tabs.CONSTRAINT_NAME || &#39; y la columna a la que hace referencia es: &#39; || v_tabs.COLUMN_NAME);\nend loop;\nEND;\n/\n</code></pre>\n<p><img src=\"/images/oracle-ejercicio10.png\" alt=\"remoto\"></p>\n<h2 id=\"POSTGRESQL\"><a href=\"#POSTGRESQL\" class=\"headerlink\" title=\"POSTGRESQL\"></a>POSTGRESQL</h2><p>Comenzaremos adjuntando el script de creación de tablas e inserciones de Postgres:</p>\n<pre><code class=\"sql\">create table dept(\n  deptno   decimal(2,0) not null,\n  dname    varchar(14),\n  loc      varchar(13));\ncreate table emp(\n  empno    decimal(4,0) not null,\n  ename    varchar(10),\n  job      varchar(9),\n  mgr      decimal(4,0),\n  hiredate date,\n  sal      decimal(7,2),\n  comm     decimal(7,2),  \n  deptno   decimal(2,0) not null);\ncreate table bonus(\n  ename    varchar(10),\n  job      varchar(9),\n  sal      decimal,\n  comm     decimal);\ncreate table salgrade(\n  grade    decimal,\n  losal    decimal,\n  hisal    decimal);\ncreate table dummy (\n  dummy    decimal);\ninsert into dummy values (0);\ninsert into DEPT (DEPTNO, DNAME, LOC)\n  select 10, &#39;ACCOUNTING&#39;, &#39;NEW YORK&#39; from dummy union all\n  select 20, &#39;RESEARCH&#39;,   &#39;DALLAS&#39;   from dummy union all\n  select 30, &#39;SALES&#39;,      &#39;CHICAGO&#39;  from dummy union all\n  select 40, &#39;OPERATIONS&#39;, &#39;BOSTON&#39;   from dummy;\ninsert into emp (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)\n  select 7839, &#39;KING&#39;,   &#39;PRESIDENT&#39;, cast(null as integer), to_date(&#39;17-11-1981&#39;,&#39;dd-mm-yyyy&#39;),    5000, cast(null as integer), 10 from dummy union all\n  select 7698, &#39;BLAKE&#39;,  &#39;MANAGER&#39;,   7839, to_date(&#39;1-5-1981&#39;,&#39;dd-mm-yyyy&#39;),      2850, cast(null as integer), 30 from dummy union all\n  select 7782, &#39;CLARK&#39;,  &#39;MANAGER&#39;,   7839, to_date(&#39;9-6-1981&#39;,&#39;dd-mm-yyyy&#39;),      2450, cast(null as integer), 10 from dummy union all\n  select 7566, &#39;JONES&#39;,  &#39;MANAGER&#39;,   7839, to_date(&#39;2-4-1981&#39;,&#39;dd-mm-yyyy&#39;),      2975, cast(null as integer), 20 from dummy union all\n  select 7788, &#39;SCOTT&#39;,  &#39;ANALYST&#39;,   7566, to_date(&#39;13-7-87&#39;,&#39;dd-mm-rr&#39;) - 85,  3000, cast(null as integer), 20 from dummy union all\n  select 7902, &#39;FORD&#39;,   &#39;ANALYST&#39;,   7566, to_date(&#39;3-12-1981&#39;,&#39;dd-mm-yyyy&#39;),     3000, cast(null as integer), 20 from dummy union all\n  select 7369, &#39;SMITH&#39;,  &#39;CLERK&#39;,     7902, to_date(&#39;17-12-1980&#39;,&#39;dd-mm-yyyy&#39;),     800, cast(null as integer), 20 from dummy union all\n  select 7499, &#39;ALLEN&#39;,  &#39;SALESMAN&#39;,  7698, to_date(&#39;20-2-1981&#39;,&#39;dd-mm-yyyy&#39;),     1600,  300, 30 from dummy union all\n  select 7521, &#39;WARD&#39;,   &#39;SALESMAN&#39;,  7698, to_date(&#39;22-2-1981&#39;,&#39;dd-mm-yyyy&#39;),     1250,  500, 30 from dummy union all\n  select 7654, &#39;MARTIN&#39;, &#39;SALESMAN&#39;,  7698, to_date(&#39;28-9-1981&#39;,&#39;dd-mm-yyyy&#39;),     1250, 1400, 30 from dummy union all\n  select 7844, &#39;TURNER&#39;, &#39;SALESMAN&#39;,  7698, to_date(&#39;8-9-1981&#39;,&#39;dd-mm-yyyy&#39;),      1500,    0, 30 from dummy union all\n  select 7876, &#39;ADAMS&#39;,  &#39;CLERK&#39;,     7788, to_date(&#39;13-7-87&#39;, &#39;dd-mm-rr&#39;) - 51, 1100, cast(null as integer), 20 from dummy union all\n  select 7900, &#39;JAMES&#39;,  &#39;CLERK&#39;,     7698, to_date(&#39;3-12-1981&#39;,&#39;dd-mm-yyyy&#39;),      950, cast(null as integer), 30 from dummy union all\n  select 7934, &#39;MILLER&#39;, &#39;CLERK&#39;,     7782, to_date(&#39;23-1-1982&#39;,&#39;dd-mm-yyyy&#39;),     1300, cast(null as integer), 10 from dummy;\ninsert into salgrade\n  select 1,  700, 1200 from dummy union all\n  select 2, 1201, 1400 from dummy union all\n  select 3, 1401, 2000 from dummy union all\n  select 4, 2001, 3000 from dummy union all\n  select 5, 3001, 9999 from dummy;\ncommit;\n</code></pre>\n<h3 id=\"1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082-1\"><a href=\"#1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082-1\" class=\"headerlink\" title=\"1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082\"></a>1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082</h3><pre><code class=\"sql\">CREATE or replace PROCEDURE mostrar_7082() \nAS $$\nDECLARE\n    v_nombre emp.ename%type;\n    v_salario emp.sal%type;\nBEGIN\n    select ename,sal into v_nombre,v_salario from emp where empno=7782;\n    RAISE NOTICE &#39;El nombre del empleado es %, y su salario es %&#39;, v_nombre,v_salario;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>\n<p><img src=\"/images/postgres-ejercicio2.png\" alt=\"remoto\"></p>\n<h3 id=\"2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre-1\"><a href=\"#2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre-1\" class=\"headerlink\" title=\"2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre\"></a>2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre</h3><pre><code class=\"sql\">Create or replace procedure codigoanombreemp (p_codempleado emp.empno%type) \nAS $$\nDECLARE\n    v_nombre emp.ename%type;\nBEGIN\n    select ename into v_nombre from emp where empno=p_codempleado;\n    RAISE NOTICE &#39;El empleado con el código %, es %&#39;, p_codempleado,v_nombre;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>\n<p><img src=\"/images/postgres-ejercicio1.png\" alt=\"remoto\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/09/Interconexiones/",
            "url": "http://example.com/2022/11/09/Interconexiones/",
            "title": "Interconexiones entre Bases de Datos",
            "date_published": "2022-11-09T19:27:01.893Z",
            "content_html": "<p><img src=\"/images/oracle-19c-logo.png\" alt=\"remoto\"></p>\n<h2 id=\"Interconexion-entre-dos-bases-de-datos-Oracle\"><a href=\"#Interconexion-entre-dos-bases-de-datos-Oracle\" class=\"headerlink\" title=\"Interconexión entre dos bases de datos Oracle.\"></a>Interconexión entre dos bases de datos Oracle.</h2><p>Antes que nada debemos saber que para conectarnos a una base de datos, debemos tener activados los listener y seguidamente tener en el tsnames.ora la base de datos a la que queremos conectarnos, de esta manera:<br>sudo nano &#x2F;opt&#x2F;oracle&#x2F;product&#x2F;19c&#x2F;dbhome_1&#x2F;network&#x2F;admin&#x2F;tnsnames.ora</p>\n<pre><code>ORCLCDB =\n  (DESCRIPTION =\n    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.122.20)(PORT = 1521))\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = ORCLCDB)\n    )\n  )\n\nLISTENER_ORCLCDB =\n  (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.122.20)(PORT = 1521))\n\nORACLESERV =\n  (DESCRIPTION =\n    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.122.168)(PORT = 1521))\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = ORCLCDB)\n    )\n  )\n</code></pre>\n<p>Hemos creado una nueva conexión llamada ORACLESERV en el cual procederemos a ingresar la ip del servidor del que queremos recibir los datos, tras esto debemos crear en la otra máquina la tabla de ejemplo que queremos extraer:</p>\n<pre><code>CREATE TABLE armas (\ncodarma varchar2 (3),\nnombre varchar2 (20),\nfuerza number (2),\ndestreza number (2),\ninteligencia number (2),\nrareza varchar2 (10),\nnivel number (2),\nCONSTRAINT pk_armas PRIMARY KEY (codarma)\n);\n\ninsert into armas values (&#39;001&#39;,&#39;Espada Corta&#39;,8,10,0,&#39;D&#39;,5);\ninsert into armas values (&#39;002&#39;,&#39;Espada Larga&#39;,10,10,0,&#39;C&#39;,8);\ninsert into armas values (&#39;003&#39;,&#39;Espada Artorias&#39;,24,18,20,&#39;S&#39;,30);\ninsert into armas values (&#39;004&#39;,&#39;Hacha de Mano&#39;,8,8,0,&#39;D&#39;,6);\ninsert into armas values (&#39;005&#39;,&#39;Hacha de Gárgola&#39;,14,14,0,&#39;A&#39;,15);\ninsert into armas values (&#39;006&#39;,&#39;Hacha de Demonio&#39;,46,0,0,&#39;S&#39;,40);\n</code></pre>\n<p>Una vez hecho esto, <strong>nos vamos a la máquina en la que vamos a trabajar con la consulta</strong>, debemos crear un enlace a la base de datos, el cual hemos predefinido como ORACLESERV:</p>\n<p><code>create database link ORACLESERVIDOR connect to antonio identified by antonio using &#39;ORACLESERV&#39;;</code></p>\n<p>Tras esto, viene una parte un poco compleja, ya que la tabla que vamos a consultar en el otro servidor viene relacionada, y a la hora de crear relaciones entre tablas no se puede especificar una base de datos remota en el DDL, entonces, cómo podemos hacer que esto funcione? bueno pues mi idea ha sido crear una vista materializada:</p>\n<p><code>create materialized view mv_armas as select codarma from armas@ORACLESERVIDOR;</code></p>\n<p>Una vez hecho esto, procedemos a crear las tablas personaje y equipar, siendo una relación N,M.</p>\n<pre><code>CREATE TABLE personaje (\ncodpersonaje varchar2 (3),\nnombre varchar2 (15),\naltura number (3,2),\npeso number (3),\nraza varchar2 (10),\nCONSTRAINT pk_codpersonaje PRIMARY KEY (codpersonaje),\nCONSTRAINT ck_codpersonaje CHECK (REGEXP_LIKE(codpersonaje,&#39;^1.*$&#39;))\n);\n\ninsert into personaje values (&#39;101&#39;,&#39;Solaire&#39;,1.70,80,&#39;humano&#39;);\ninsert into personaje values (&#39;102&#39;,&#39;Artorias&#39;,1.90,90,&#39;hueco&#39;);\ninsert into personaje values (&#39;103&#39;,&#39;Gargola&#39;,3.10,680,&#39;Gárgola&#39;);\n\nCREATE TABLE equipar (\ncodpersonaje varchar2 (3),\ncodarma varchar2 (3),\nfecha date,\nCONSTRAINT pk_equipar PRIMARY KEY (codpersonaje,codarma,fecha),\nCONSTRAINT fk_codpersonaje FOREIGN KEY (codpersonaje) REFERENCES personaje (codpersonaje),\nCONSTRAINT fk_codarma FOREIGN KEY (codarma) REFERENCES mv_armas(codarma);\n);\n\ninsert into equipar values (&#39;102&#39;,&#39;003&#39;,to_date(&#39;2011/02/11&#39;,&#39;YYYY/MM/DD&#39;));\ninsert into equipar values (&#39;103&#39;,&#39;005&#39;,to_date(&#39;2011/05/04&#39;,&#39;YYYY/MM/DD&#39;));\ninsert into equipar values (&#39;101&#39;,&#39;002&#39;,to_date(&#39;2011/06/03&#39;,&#39;YYYY/MM/DD&#39;));\ninsert into equipar values (&#39;103&#39;,&#39;002&#39;,to_date(&#39;2011/09/02&#39;,&#39;YYYY/MM/DD&#39;));\ninsert into equipar values (&#39;101&#39;,&#39;006&#39;,to_date(&#39;2011/08/03&#39;,&#39;YYYY/MM/DD&#39;));\ninsert into equipar values (&#39;102&#39;,&#39;004&#39;,to_date(&#39;2011/07/01&#39;,&#39;YYYY/MM/DD&#39;));\n</code></pre>\n<p>¡¡Mucho ojo!! la restricción que he establecido en equipar, que es la foreign key que relaciona el código de armas con nuestra base de datos, llamará a la view que hemos creado y contendrá los datos de la consulta al servidor externo.</p>\n<p><img src=\"/images/sql-remoto.png\" alt=\"remoto\"></p>\n<p><img src=\"/images/sql-remoto2.png\" alt=\"remoto\"></p>\n<h2 id=\"Interconexion-entre-dos-bases-de-datos-Postgres\"><a href=\"#Interconexion-entre-dos-bases-de-datos-Postgres\" class=\"headerlink\" title=\"Interconexión entre dos bases de datos Postgres.\"></a>Interconexión entre dos bases de datos Postgres.</h2><p>Primero vamos a modificar el fichero &#x2F;etc&#x2F;postgresql&#x2F;13&#x2F;main&#x2F;postgresql.conf para abrir la escucha a la ip que quiera conectarse:<br><code>listen_addresses = &#39;*&#39;</code></p>\n<p>Modificamos el fichero &#x2F;etc&#x2F;postgresql&#x2F;13&#x2F;main&#x2F;pg_hba.conf, y aladimos la siguiente línea:<br><code>host    all             all             192.168.122.0/24        md5</code></p>\n<p>Procedemos a reiniciar Postgres para efectuar los cambios:<br><code>sudo systemctl restart postgresql</code></p>\n<p>Luego vamos a crear la base de datos souls, luego vamos a darle permiso al usuario antonio2 para poder manejar la base de datos:</p>\n<pre><code>postgres=# create database souls\npostgres-# ;\nCREATE DATABASE\nGRANT ALL PRIVILEGES ON DATABASE souls TO antonio2;\npostgres=# grant connect on database souls to antonio2;\nGRANT\npostgres=# grant usage on schema public to antonio2;\nGRANT\n</code></pre>\n<p>En el otro servidor establecemos la configuración de antonio1:</p>\n<pre><code>postgres=# create user antonio1 with password &#39;antonio1&#39;;\nCREATE ROLE\npostgres=# create database souls;\nCREATE DATABASE\nGRANT ALL PRIVILEGES ON DATABASE souls TO antonio1;\npostgres=# grant connect on database souls to antonio1;\nGRANT\npostgres=# grant usage on schema public to antonio1;\nGRANT\npostgres=# \\c souls;\n</code></pre>\n<p>Ahora vamos a instalar el paquete que nos permitirá realizar el dblink:<br><code>sudo apt install postgresql-contrib</code></p>\n<p>De modo que si hacemos una consulta con dblink especificando el host, usuario y base de datos del que se habla, podremos sacar la información de las bases de datos respectivamente.</p>\n<p><code>select * from dblink(&#39;dbname=souls host=192.168.122.168 user=antonio2 password=antonio2&#39;, &#39;select nombre from armas&#39;) as armas (Nombre VARCHAR);</code></p>\n<p><img src=\"/images/postgres-postgres.png\" alt=\"Descripción de la imagen\"></p>\n<h2 id=\"Interconexion-entre-bases-de-datos-Oracle-y-Postgres\"><a href=\"#Interconexion-entre-bases-de-datos-Oracle-y-Postgres\" class=\"headerlink\" title=\"Interconexión entre bases de datos Oracle y Postgres.\"></a>Interconexión entre bases de datos Oracle y Postgres.</h2><p>En nuestro caso la paquetería que necesitamos para conectar Oracle a Postgres es la de Debian Bullseye, por tanto el comando sería el siguiente:<br><code>sudo apt install odbc-postgresql unixodbc -y</code></p>\n<p>Ahora vamos a entrar en &#x2F;etc&#x2F;odbc.ini y vamos a ingresar los siguientes parámetros adaptándolos a nuestro usuario, host y base de datos:</p>\n<pre><code>[PSQLA]\nDebug = 0\nCommLog = 0\nReadOnly = 1\nDriver = PostgreSQL ANSI\nServername = 192.168.122.168\nUsername = antonio2\nPassword = antonio2\nPort = 5432\nDatabase = souls\nTrace = 0\nTraceFile = /tmp/sql.log\n\n[PSQLU]\nDebug = 0\nCommLog = 0\nReadOnly = 0\nDriver = PostgreSQL Unicode\nServername = 192.168.122.168\nUsername = antonio2\nPassword = antonio2\nPort = 5432\nDatabase = souls\nTrace = 0\nTraceFile = /tmp/sql.log\n\n[Default]\nDriver = /usr/lib/x86_64-linux-gnu/odbc/liboplodbcS.so\n</code></pre>\n<p>Ahora vamos a comprobar el fichero &#x2F;etc&#x2F;ocdbinst.ini y debe venir configurado como se muestra abajo.</p>\n<pre><code>[PostgreSQL ANSI]\nDescription=PostgreSQL ODBC driver (ANSI version)\nDriver=psqlodbca.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1\n\n[PostgreSQL Unicode]\nDescription=PostgreSQL ODBC driver (Unicode version)\nDriver=psqlodbcw.so\nSetup=libodbcpsqlS.so\nDebug=0\nCommLog=1\nUsageCount=1\n</code></pre>\n<p>Podemos comprobar la configuración ingresando los siguientes comandos:</p>\n<pre><code>odbcinst -q -d\n    [PostgreSQL ANSI]\n    [PostgreSQL Unicode]\n\n\nodbcinst -q -s\n    [PSQLA]\n    [PSQLU]\n    [Default]\n</code></pre>\n<p>ejecutamos <code>isql -v PSQLU</code> y si todo ha ido bien nos devolverá esto:</p>\n<pre><code>+---------------------------------------+\n| Connected!                            |\n|                                       |\n| sql-statement                         |\n| help [tablename]                      |\n| quit                                  |\n|                                       |\n+---------------------------------------+\n</code></pre>\n<p>A continuación vamos a <code>/opt/oracle/product/19c/dbhome_1/hs/admin/initPSQLU.ora</code> e ingresamos los siguientes datos:</p>\n<pre><code>HS_FDS_CONNECT_INFO = PSQLU\nHS_FDS_TRACE_LEVEL = Debug\nHS_FDS_SHAREABLE_NAME = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so\nHS_LANGUAGE = AMERICAN_AMERICA.WE8ISO8859P1\nset ODBCINI=/etc/odbc.ini\n</code></pre>\n<p>Vamos al listener.ora e ingresamos los siguentes parámetros:</p>\n<pre><code>SID_LIST_LISTENER =\n (SID_LIST =\n  (SID_DESC =\n   (GLOBAL_DBNAME = ORCLCDB)\n   (ORACLE_HOME = /opt/oracle/product/19c/dbhome_1)\n   (SID_NAME = ORCLCDB)\n  )\n  (SID_DESC =\n    (SID_NAME = PSQLU)\n    (PROGRAM = dg4odbc)\n    (ORACLE_HOME = /opt/oracle/product/19c/dbhome_1)\n  )\n )\n</code></pre>\n<p>Ahora realizaremos un lsnrctl stop y lisnrctl start, y nos debe salir un mensaje como el siguiente:</p>\n<pre><code>Service &quot;PSQLU&quot; has 1 instance(s).\n  Instance &quot;PSQLU&quot;, status UNKNOWN, has 1 handler(s) for this service...\nService &quot;orcl&quot; has 1 instance(s).\n  Instance &quot;orcl&quot;, status UNKNOWN, has 1 handler(s) for this service...\nThe command completed successfully\n</code></pre>\n<p>Ahora nos vamos al tnsnames.ora y añadimos lo siguiente:</p>\n<pre><code>PSQLU =\n (DESCRIPTION =\n (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))\n   (CONNECT_DATA = (SID = PSQLU))\n   (HS = OK)\n  )\n</code></pre>\n<p>En localhost estamos especificando que la ip de la máquina sería la misma en la que está alojado el servicio postgre, esto es debido a que se redirecciona a través de la configuración en odbc.ini entonces ya tan solo quedaría conceder permisos de conexión publica de la base de datos a antonio:</p>\n<pre><code>GRANT CREATE PUBLIC DATABASE LINK to antonio;\n\nConcesion terminada correctamente.\n</code></pre>\n<p>Ahora solo nos queda realizar la conexión:</p>\n<pre><code>CREATE PUBLIC DATABASE LINK CONEXIONPOSTGRES2\nCONNECT TO &quot;antonio2&quot;\nIDENTIFIED BY &quot;antonio2&quot;\nUSING &#39;PSQLU&#39;;\n\nEnlace con la base de datos creado.\n</code></pre>\n<p>Comprobamos que se pueda consultar el nombre de las armas en <strong>CONEXIONPOSTGRES2</strong></p>\n<p><img src=\"/images/oracle-postgres.png\" alt=\"Descripción de la imagen\"></p>\n<h2 id=\"Interconexion-entre-bases-de-datos-Postgres-y-Oracle\"><a href=\"#Interconexion-entre-bases-de-datos-Postgres-y-Oracle\" class=\"headerlink\" title=\"Interconexión entre bases de datos Postgres y Oracle.\"></a>Interconexión entre bases de datos Postgres y Oracle.</h2><p>Primero vamos a instalar unos paquetes que nos servirán tanto para establecer la conexión con Oracle como a la hora de compilar el Makefile que necesitaremos más adelante:</p>\n<p><code>apt install git build-essential libaio1 postgresql-server-dev-all -y</code></p>\n<p>Para realizar la interconexión entre Postgres y Oracle necesitaremos software de terceros, en mi caso vamos a descargar los paquetes que se encuentran en el siguiente enlace:</p>\n<p><a href=\"https://drive.google.com/file/d/1UmBNjVLffaj-hXDXdi6hPGpz6CIZr8eN/view?usp=share_link\">https://drive.google.com/file/d/1UmBNjVLffaj-hXDXdi6hPGpz6CIZr8eN/view?usp=share_link</a></p>\n<p>En él se encuentran los paquetes en formato.deb, del cual me ocupé de transformar con alien.</p>\n<p>Ahora procedemos a instalar los paquetes que adaptarán el formato sqlplus:</p>\n<pre><code>sudo dpkg -i oracle-instantclient19.5-devel_19.5.0.0.0-2_amd64.deb\nsudo dpkg -i oracle-instantclient19.5-basic_19.5.0.0.0-2_amd64.deb\nsudo dpkg -i oracle-instantclient19.5-tools_19.5.0.0.0-2_amd64.deb\nsudo dpkg -i oracle-instantclient19.5-sqlplus_19.5.0.0.0-2_amd64.deb\n</code></pre>\n<p>Ahora vamos a clonar el repositorio con el que trabajaremos para establecer la conexión de Postgres a Oracle:</p>\n<p>git clone <a href=\"https://github.com/laurenz/oracle_fdw.git\">https://github.com/laurenz/oracle_fdw.git</a></p>\n<p>Ahora en nuestra máquina postgres necesitaremos crear las variables de entorno de Oracle, para ello ingresaremos lo siguiente al final de nuestro .bashrc</p>\n<pre><code>sudo nano ~/.bashrc\n\nexport ORACLE_HOME=&quot;/usr/lib/oracle/19.5/client64&quot;\nexport LD_LIBRARY_PATH=&quot;/usr/lib/oracle/19.5/client64/lib&quot;\nexport PATH=$ORACLE_HOME:$PATH\nexport USE_PGXS=1\n</code></pre>\n<p>Ahora vamos a generar el makefile ejecutando un <code>make</code> dentro del directorio que hemos clonado.</p>\n<p>UNa vez hecho esto, ante de proceder a instalar el binario, debamo incluir las siguientes líneas a nuestro makefile.</p>\n<pre><code>PG_CPPFLAGS = -I&quot;$(ORACLE_HOME)/sdk/include&quot; -I&quot;$(ORACLE_HOME)/oci/include&quot; -I&quot;$(ORACLE_HOME)/rdbms/public&quot; -I&quot;$(ORACLE_HOME)/&quot; $(FIN&gt;\n\nSHLIB_LINK = -L&quot;$(ORACLE_HOME)/&quot; -L&quot;$(ORACLE_HOME)/bin&quot; -L&quot;$(ORACLE_HOME)/lib&quot; -L&quot;$(ORACLE_HOME)/lib/amd64&quot; $(FIND_LDFLAGS) -l$(ORACL&gt;\n</code></pre>\n<p>Ahora podemos ejecutar un <code>make install</code> sin errores ya que las dependencias necesarias para la instalación fueron descargadas con anterioridad.</p>\n<p>Luego entramos en nuestra base de datos con el usuario postgres para crear nuestro enlace a Oracle, debemos especificar la ip que tendrá el sevidor y el nombre de la base de datos que en nuestro caso será el por defecto ‘ORCLCDB’.</p>\n<pre><code>CREATE SERVER oracleantonio FOREIGN DATA WRAPPER oracle_fdw OPTIONS(dbserver &#39;//192.168.122.168:1521/ORCLCDB&#39;);\n</code></pre>\n<p>Una vez hecho esto vamos a enlazar la conexión de nuestro oracleantonio con el usuario que tenga acceso a los registros de la tabla armas, de forma que quedaría de la siguiente manera:</p>\n<pre><code>create user mapping for postgres server oracleantonio options(user &#39;antonio&#39;,password &#39;antonio&#39;);\nDROP user mapping for postgres server oracleantonio; (En caso de que haya algún tipo de error).\n</code></pre>\n<p>Crearemos el esqueleto de la tabla que necesitamos en la base de datos pero sin restricciones ni unique, ya que colisionan con la ejecución de la conexión remota, solo necesitaremos los campos que vayan a ser rellenados:</p>\n<pre><code>CREATE FOREIGN TABLE personaje (\ncodpersonaje varchar (3),\nnombre varchar (15),\naltura numeric (3,2),\npeso numeric (3),\nraza varchar (10) DEFAULT (&#39;Humano&#39;))\nSERVER oracleantonio OPTIONS(schema &#39;ANTONIO&#39;, table &#39;PERSONAJE&#39;\n);\n</code></pre>\n<p>Ahora solo nos queda realizar la consulta y podemos comprobar como esta se resuelve con éxito.</p>\n<p><img src=\"/images/postgres-oracle.png\" alt=\"Descripción de la imagen\"></p>\n",
            "tags": []
        }
    ]
}
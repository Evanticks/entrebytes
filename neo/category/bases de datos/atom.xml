<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Hexo • Posts by &#34;bases de datos&#34; category</title>
    <link href="http://example.com" />
    <updated>2022-12-07T01:39:06.680Z</updated>
    <category term="Servicios de Red e Internet" />
    <category term="Sistemas Operativos" />
    <category term="Seguridad" />
    <entry>
        <id>http://example.com/2022/12/07/plsql_basico/</id>
        <title>Procedimientos en Oracle y Postgres</title>
        <link rel="alternate" href="http://example.com/2022/12/07/plsql_basico/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/images/oraclepostgres.jpg&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ORACLE&#34;&gt;&lt;a href=&#34;#ORACLE&#34; class=&#34;headerlink&#34; title=&#34;ORACLE&#34;&gt;&lt;/a&gt;ORACLE&lt;/h2&gt;&lt;p&gt;Comenzaremos adjuntando el script de creación de tablas e inserciones de Oracle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE DEPT
(
 DEPTNO NUMBER(2),
 DNAME VARCHAR2(14),
 LOC VARCHAR2(13),
 CONSTRAINT PK_DEPT PRIMARY KEY (DEPTNO)
);
CREATE TABLE EMP
(
 EMPNO NUMBER(4),
 ENAME VARCHAR2(10),
 JOB VARCHAR2(9),
 MGR NUMBER(4),
 HIREDATE DATE,
 SAL NUMBER(7, 2),
 COMM NUMBER(7, 2),
 DEPTNO NUMBER(2),
 CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTNO) REFERENCES DEPT (DEPTNO),
 CONSTRAINT PK_EMP PRIMARY KEY (EMPNO)
);
INSERT INTO DEPT VALUES (10, &amp;#39;ACCOUNTING&amp;#39;, &amp;#39;NEW YORK&amp;#39;);
INSERT INTO DEPT VALUES (20, &amp;#39;RESEARCH&amp;#39;, &amp;#39;DALLAS&amp;#39;);
INSERT INTO DEPT VALUES (30, &amp;#39;SALES&amp;#39;, &amp;#39;CHICAGO&amp;#39;);
INSERT INTO DEPT VALUES (40, &amp;#39;OPERATIONS&amp;#39;, &amp;#39;BOSTON&amp;#39;);
INSERT INTO EMP VALUES(7369, &amp;#39;SMITH&amp;#39;, &amp;#39;CLERK&amp;#39;, 7902,TO_DATE(&amp;#39;17-DIC-1980&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 800, NULL, 20);
INSERT INTO EMP VALUES(7499, &amp;#39;ALLEN&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698,TO_DATE(&amp;#39;20-FEB-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 1600, 300, 30);
INSERT INTO EMP VALUES(7521, &amp;#39;WARD&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698,TO_DATE(&amp;#39;22-FEB-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 1250, 500, 30);
INSERT INTO EMP VALUES(7566, &amp;#39;JONES&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839,TO_DATE(&amp;#39;2-ABR-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 2975, NULL, 20);
INSERT INTO EMP VALUES(7654, &amp;#39;MARTIN&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698,TO_DATE(&amp;#39;28-SEP-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 1250, 1400, 30);
INSERT INTO EMP VALUES(7698, &amp;#39;BLAKE&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839,TO_DATE(&amp;#39;1-MAY-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 2850, NULL, 30);
INSERT INTO EMP VALUES(7782, &amp;#39;CLARK&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839,TO_DATE(&amp;#39;9-JUN-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 2450, NULL, 10);
INSERT INTO EMP VALUES(7788, &amp;#39;SCOTT&amp;#39;, &amp;#39;ANALYST&amp;#39;, 7566,TO_DATE(&amp;#39;09-DIC-1982&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 3000, NULL, 20);
INSERT INTO EMP VALUES(7839, &amp;#39;KING&amp;#39;, &amp;#39;PRESIDENT&amp;#39;, NULL,TO_DATE(&amp;#39;17-NOV-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 5000, NULL, 10);
INSERT INTO EMP VALUES(7844, &amp;#39;TURNER&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698,TO_DATE(&amp;#39;8-SEP-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 1500, 0, 30);
INSERT INTO EMP VALUES(7876, &amp;#39;ADAMS&amp;#39;, &amp;#39;CLERK&amp;#39;, 7788,TO_DATE(&amp;#39;12-ENE-1983&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 1100, NULL, 20);
INSERT INTO EMP VALUES(7900, &amp;#39;JAMES&amp;#39;, &amp;#39;CLERK&amp;#39;, 7698,TO_DATE(&amp;#39;3-DIC-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 950, NULL, 30);
INSERT INTO EMP VALUES(7902, &amp;#39;FORD&amp;#39;, &amp;#39;ANALYST&amp;#39;, 7566,TO_DATE(&amp;#39;3-DIC-1981&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 3000, NULL, 20);
INSERT INTO EMP VALUES(7934, &amp;#39;MILLER&amp;#39;, &amp;#39;CLERK&amp;#39;, 7782,TO_DATE(&amp;#39;23-ENE-1982&amp;#39;, &amp;#39;DD-MON-YYYY&amp;#39;), 1300, NULL, 10);

COMMIT;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082&#34;&gt;&lt;a href=&#34;#1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082&#34; class=&#34;headerlink&#34; title=&#34;1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082&#34;&gt;&lt;/a&gt;1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create or replace procedure mostrar_7082
IS
    v_nombre emp.ename%type;
    v_sal emp.sal%type;
BEGIN
    select ename,sal into v_nombre,v_sal 
    from emp
    where empno= 7782;
    dbms_output.put_line(&amp;#39;El nombre del empleado 7082 es &amp;#39; || v_nombre || &amp;#39; y su salario es &amp;#39; || v_sal );
END;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio1.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre&#34;&gt;&lt;a href=&#34;#2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre&#34; class=&#34;headerlink&#34; title=&#34;2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre&#34;&gt;&lt;/a&gt;2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;Create or replace procedure codigoanombreemp (p_codempleado emp.empno%type)
IS
    v_nombre emp.ename%type;
BEGIN
    select ename into v_nombre from emp where empno=p_codempleado;
    dbms_output.put_line (&amp;#39;El empleado con el código &amp;#39; || p_codempleado || &amp;#39; es &amp;#39; || v_nombre);
END;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio2.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-Hacer-un-procedimiento-que-devuelva-los-nombres-de-los-tres-empleados-mas-antiguos&#34;&gt;&lt;a href=&#34;#3-Hacer-un-procedimiento-que-devuelva-los-nombres-de-los-tres-empleados-mas-antiguos&#34; class=&#34;headerlink&#34; title=&#34;3. Hacer un procedimiento que devuelva los nombres de los tres empleados más antiguos&#34;&gt;&lt;/a&gt;3. Hacer un procedimiento que devuelva los nombres de los tres empleados más antiguos&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create or replace procedure tresempleadosmasantiguos
IS
cursor c_empleados is
select ename from emp WHERE ROWNUM &amp;lt;= 3 order by hiredate asc;
BEGIN
FOR v_empleados in c_empleados loop
    dbms_output.put_line (v_empleados.ename);
end loop;
END;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio5.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-Hacer-un-procedimiento-que-reciba-el-nombre-de-un-tablespace-y-muestre-los-nombres-de-los-usuarios-que-lo-tienen-como-tablespace-por-defecto-Vista-DBA-USERS&#34;&gt;&lt;a href=&#34;#4-Hacer-un-procedimiento-que-reciba-el-nombre-de-un-tablespace-y-muestre-los-nombres-de-los-usuarios-que-lo-tienen-como-tablespace-por-defecto-Vista-DBA-USERS&#34; class=&#34;headerlink&#34; title=&#34;4. Hacer un procedimiento que reciba el nombre de un tablespace y muestre los nombres de los usuarios que lo tienen como tablespace por defecto (Vista DBA_USERS)&#34;&gt;&lt;/a&gt;4. Hacer un procedimiento que reciba el nombre de un tablespace y muestre los nombres de los usuarios que lo tienen como tablespace por defecto (Vista DBA_USERS)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create or replace procedure tablespacedefecto (p_tablespace DBA_USERS.DEFAULT_TABLESPACE%type)
IS
cursor c_tablespace is
SELECT USERNAME from DBA_USERS where DEFAULT_TABLESPACE=p_tablespace;
BEGIN
FOR v_usuarios in c_tablespace loop
    dbms_output.put_line (v_usuarios.USERNAME);
end loop;
END;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio3.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-Modificar-el-procedimiento-anterior-para-que-haga-lo-mismo-pero-devolviendo-el-numero-de-usuarios-que-tienen-ese-tablespace-como-tablespace-por-defecto-Nota-Hay-que-convertir-el-procedimiento-en-funcion&#34;&gt;&lt;a href=&#34;#5-Modificar-el-procedimiento-anterior-para-que-haga-lo-mismo-pero-devolviendo-el-numero-de-usuarios-que-tienen-ese-tablespace-como-tablespace-por-defecto-Nota-Hay-que-convertir-el-procedimiento-en-funcion&#34; class=&#34;headerlink&#34; title=&#34;5. Modificar el procedimiento anterior para que haga lo mismo pero devolviendo el número de usuarios que tienen ese tablespace como tablespace por defecto. Nota: Hay que convertir el procedimiento en función&#34;&gt;&lt;/a&gt;5. Modificar el procedimiento anterior para que haga lo mismo pero devolviendo el número de usuarios que tienen ese tablespace como tablespace por defecto. Nota: Hay que convertir el procedimiento en función&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create or replace function tablespacedefecto (p_tablespace DBA_USERS.DEFAULT_TABLESPACE%type)
return number
IS
v_num number (4);
BEGIN
SELECT count(USERNAME) into v_num from DBA_USERS where DEFAULT_TABLESPACE=p_tablespace;
return v_num;
END;
/

create or replace procedure mostrarfunciontablespacedefecto (p_tablespace DBA_USERS.DEFAULT_TABLESPACE%type)
is
v_num number;
BEGIN
    v_num:=tablespacedefecto(p_tablespace);
    dbms_output.put_line (&amp;#39;El tablespace &amp;#39; || p_tablespace || &amp;#39; lo tienen &amp;#39; || v_num || &amp;#39; usuarios.&amp;#39;);
end;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio4.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-Hacer-un-procedimiento-llamado-mostrar-usuarios-por-tablespace-que-muestre-por-pantalla-un-listado-de-los-tablespaces-existentes-con-la-lista-de-usuarios-de-cada-uno-y-el-numero-de-los-mismos-asi-Vistas-DBA-TABLESPACES-y-DBA-USERS&#34;&gt;&lt;a href=&#34;#6-Hacer-un-procedimiento-llamado-mostrar-usuarios-por-tablespace-que-muestre-por-pantalla-un-listado-de-los-tablespaces-existentes-con-la-lista-de-usuarios-de-cada-uno-y-el-numero-de-los-mismos-asi-Vistas-DBA-TABLESPACES-y-DBA-USERS&#34; class=&#34;headerlink&#34; title=&#34;6. Hacer un procedimiento llamado mostrar_usuarios_por_tablespace que muestre por pantalla un listado de los tablespaces existentes con la lista de usuarios de cada uno y el número de los mismos, así: (Vistas DBA_TABLESPACES y DBA_USERS)&#34;&gt;&lt;/a&gt;6. Hacer un procedimiento llamado mostrar_usuarios_por_tablespace que muestre por pantalla un listado de los tablespaces existentes con la lista de usuarios de cada uno y el número de los mismos, así: (Vistas DBA_TABLESPACES y DBA_USERS)&lt;/h3&gt;&lt;p&gt;En  este ejercicio en concreto utilizaremos una función creada en el anterior ejercicio para este propósito.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create or replace procedure mostrar_usuarios_por_tablespace
is
cursor c_tablespace is
select DISTINCT DEFAULT_TABLESPACE from DBA_USERS;
BEGIN
for v_tablespace in c_tablespace loop
dbms_output.put_line(&amp;#39;Tablespace &amp;#39; || v_tablespace.DEFAULT_TABLESPACE || &amp;#39;:&amp;#39;);
MOSTRARUSUARIOS(v_tablespace.DEFAULT_TABLESPACE);
dbms_output.put_line(&amp;#39;Total Usuarios Tablespace &amp;#39;|| v_tablespace.DEFAULT_TABLESPACE || &amp;#39;: &amp;#39; || tablespacedefecto(v_tablespace.DEFAULT_TABLESPACE));
end loop;
end;
/


CREATE OR REPLACE PROCEDURE MOSTRARUSUARIOS (p_tablespace in out varchar2)
is
cursor c_nombre is
select USERNAME FROM DBA_USERS WHERE DEFAULT_TABLESPACE=p_tablespace;
BEGIN
FOR v_nombre in c_nombre loop
    dbms_output.put_line(&amp;#39;Usuario &amp;#39; || v_nombre.USERNAME );
end loop;
end;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio6.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-Hacer-un-procedimiento-llamado-mostrar-codigo-fuente-que-reciba-el-nombre-de-otro-procedimiento-y-muestre-su-codigo-fuente-DBA-SOURCE&#34;&gt;&lt;a href=&#34;#7-Hacer-un-procedimiento-llamado-mostrar-codigo-fuente-que-reciba-el-nombre-de-otro-procedimiento-y-muestre-su-codigo-fuente-DBA-SOURCE&#34; class=&#34;headerlink&#34; title=&#34;7. Hacer un procedimiento llamado mostrar_codigo_fuente  que reciba el nombre de otro procedimiento y muestre su código fuente. (DBA_SOURCE)&#34;&gt;&lt;/a&gt;7. Hacer un procedimiento llamado mostrar_codigo_fuente  que reciba el nombre de otro procedimiento y muestre su código fuente. (DBA_SOURCE)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create or replace procedure mostrar_codigo_fuente (p_procedimiento varchar2)
IS
cursor c_fuente is
select text from DBA_SOURCE where NAME=p_procedimiento;
BEGIN
FOR v_fuente in c_fuente loop
    dbms_output.put_line(v_fuente.text);
end loop;
end;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio7.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;8-Hacer-un-procedimiento-llamado-mostrar-privilegios-usuario-que-reciba-el-nombre-de-un-usuario-y-muestre-sus-privilegios-de-sistema-y-sus-privilegios-sobre-objetos-DBA-SYS-PRIVS-y-DBA-TAB-PRIVS&#34;&gt;&lt;a href=&#34;#8-Hacer-un-procedimiento-llamado-mostrar-privilegios-usuario-que-reciba-el-nombre-de-un-usuario-y-muestre-sus-privilegios-de-sistema-y-sus-privilegios-sobre-objetos-DBA-SYS-PRIVS-y-DBA-TAB-PRIVS&#34; class=&#34;headerlink&#34; title=&#34;8. Hacer un procedimiento llamado mostrar_privilegios_usuario que reciba el nombre de un usuario y muestre sus privilegios de sistema y sus privilegios sobre objetos. (DBA_SYS_PRIVS y DBA_TAB_PRIVS)&#34;&gt;&lt;/a&gt;8. Hacer un procedimiento llamado mostrar_privilegios_usuario que reciba el nombre de un usuario y muestre sus privilegios de sistema y sus privilegios sobre objetos. (DBA_SYS_PRIVS y DBA_TAB_PRIVS)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE OR REPLACE PROCEDURE mostrar_privilegios_usuario (p_usuario DBA_USERS.USERNAME%TYPE)
is
cursor c_sistema is
SELECT GRANTEE,PRIVILEGE FROM DBA_SYS_PRIVS WHERE GRANTEE=p_usuario;
cursor c_objeto is
SELECT GRANTEE,PRIVILEGE FROM DBA_TAB_PRIVS WHERE GRANTEE=p_usuario;
BEGIN
FOR v_sistema in c_sistema loop
    dbms_output.put_line(&amp;#39;Privilegio de sistema: &amp;#39; || v_sistema.PRIVILEGE);
end loop;
FOR v_objeto in c_objeto loop
    dbms_output.put_line(&amp;#39;Privilegiode objetos: &amp;#39; || v_objeto.PRIVILEGE);
end loop;
END;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio8.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;9-Realiza-un-procedimiento-llamado-listar-comisiones-que-nos-muestre-por-pantalla-un-listado-de-las-comisiones-de-los-empleados-agrupados-segun-la-localidad-donde-esta-ubicado-su-departamento-con-el-siguiente-formato&#34;&gt;&lt;a href=&#34;#9-Realiza-un-procedimiento-llamado-listar-comisiones-que-nos-muestre-por-pantalla-un-listado-de-las-comisiones-de-los-empleados-agrupados-segun-la-localidad-donde-esta-ubicado-su-departamento-con-el-siguiente-formato&#34; class=&#34;headerlink&#34; title=&#34;9. Realiza un procedimiento llamado listar_comisiones que nos muestre por pantalla un listado de las comisiones de los empleados agrupados según la localidad donde está ubicado su departamento con el siguiente formato:&#34;&gt;&lt;/a&gt;9. Realiza un procedimiento llamado listar_comisiones que nos muestre por pantalla un listado de las comisiones de los empleados agrupados según la localidad donde está ubicado su departamento con el siguiente formato:&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE OR REPLACE PROCEDURE Listar_comisiones
IS
cursor c_localidad is
select dname,loc from dept;
v_total number(5);
BEGIN
select sum(comm) into v_total from emp; 
FOR v_localidad in c_localidad loop
    dbms_output.put_line(&amp;#39;Localidad: &amp;#39; || v_localidad.loc);
    dbms_output.put_line(&amp;#39;Departamento: &amp;#39; || v_localidad.dname);
    MOSTRARCOMISIONES(v_localidad.loc);
end loop;
dbms_output.put_line(&amp;#39;Total comisiones en la empresa es de: &amp;#39; || v_total);
exception
WHEN NO_DATA_FOUND then
dbms_output.put_line(&amp;#39;Hay tablas vacías&amp;#39;);
end;
/

CREATE OR REPLACE PROCEDURE MOSTRARCOMISIONES (p_localidad in out varchar2)
IS
cursor c_comisiones is
select ename,comm from emp where deptno in (select deptno from dept where loc = p_localidad);
v_total number(5);
BEGIN
select sum(comm) into v_total from emp where deptno in  (select deptno from dept where loc = p_localidad);
FOR v_empleado in c_comisiones loop
    dbms_output.put_line(&amp;#39;Empleado: &amp;#39; || v_empleado.ename || &amp;#39;..................&amp;#39; || v_empleado.comm);
    if v_empleado.comm &amp;gt; 10000 then
        raise_application_error(-20001,&amp;#39;Hay algún empleado con más de 10.000 de comisión&amp;#39;);
    end if;
end loop;
dbms_output.put_line(&amp;#39;Total comisiones departamento: &amp;#39; || p_localidad || &amp;#39; es de: &amp;#39; || v_total);
END;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver en la imagen que se produce un raise ya que hay un usuario con más de 10.000 de comm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio9.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-Realiza-un-procedimiento-que-reciba-el-nombre-de-una-tabla-y-muestre-los-nombres-de-las-restricciones-que-tiene-a-que-columna-afectan-y-en-que-consisten-exactamente-DBA-TABLES-DBA-CONSTRAINTS-DBA-CONS-COLUMNS&#34;&gt;&lt;a href=&#34;#10-Realiza-un-procedimiento-que-reciba-el-nombre-de-una-tabla-y-muestre-los-nombres-de-las-restricciones-que-tiene-a-que-columna-afectan-y-en-que-consisten-exactamente-DBA-TABLES-DBA-CONSTRAINTS-DBA-CONS-COLUMNS&#34; class=&#34;headerlink&#34; title=&#34;10. Realiza un procedimiento que reciba el nombre de una tabla y muestre los nombres de las restricciones que tiene, a qué columna afectan y en qué consisten exactamente. (DBA_TABLES, DBA_CONSTRAINTS, DBA_CONS_COLUMNS)&#34;&gt;&lt;/a&gt;10. Realiza un procedimiento que reciba el nombre de una tabla y muestre los nombres de las restricciones que tiene, a qué columna afectan y en qué consisten exactamente. (DBA_TABLES, DBA_CONSTRAINTS, DBA_CONS_COLUMNS)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION_VC FROM DBA_CONSTRAINTS WHERE TABLE_NAME=&amp;#39;EQUIPAR&amp;#39;;
SELECT CONSTRAINT_NAME,COLUMN_NAME FROM DBA_CONS_COLUMNS WHERE TABLE_NAME = &amp;#39;PERSONAJE&amp;#39;;

CREATE OR REPLACE PROCEDURE MOSTRARRESTRICCIONES (p_tabla varchar2)
is
v_tabla varchar2(50);
BEGIN
v_tabla:=p_tabla;
MOSTRARCONSSYS (v_tabla);
MOSTRARCONSTABS (v_tabla);
end;
/

CREATE OR REPLACE PROCEDURE MOSTRARCONSSYS (p_tabla in out varchar2)
IS
cursor c_system is
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION_VC FROM DBA_CONSTRAINTS WHERE TABLE_NAME=p_tabla;
BEGIN
FOR v_system in c_system loop
    dbms_output.put_line(v_system.CONSTRAINT_NAME || &amp;#39;Tipo de restricción: &amp;#39; || v_system.CONSTRAINT_TYPE || v_system.SEARCH_CONDITION_VC);
end loop;
END;
/


CREATE OR REPLACE PROCEDURE MOSTRARCONSTABS (p_tabla in out varchar2)
IS
cursor c_tabs is
SELECT CONSTRAINT_NAME,COLUMN_NAME FROM DBA_CONS_COLUMNS WHERE TABLE_NAME = p_tabla;
BEGIN
FOR v_tabs in c_tabs loop
    dbms_output.put_line(&amp;#39;Restricción: &amp;#39; || v_tabs.CONSTRAINT_NAME || &amp;#39; y la columna a la que hace referencia es: &amp;#39; || v_tabs.COLUMN_NAME);
end loop;
END;
/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-ejercicio10.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;POSTGRESQL&#34;&gt;&lt;a href=&#34;#POSTGRESQL&#34; class=&#34;headerlink&#34; title=&#34;POSTGRESQL&#34;&gt;&lt;/a&gt;POSTGRESQL&lt;/h2&gt;&lt;p&gt;Comenzaremos adjuntando el script de creación de tablas e inserciones de Postgres:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create table dept(
  deptno   decimal(2,0) not null,
  dname    varchar(14),
  loc      varchar(13));
create table emp(
  empno    decimal(4,0) not null,
  ename    varchar(10),
  job      varchar(9),
  mgr      decimal(4,0),
  hiredate date,
  sal      decimal(7,2),
  comm     decimal(7,2),  
  deptno   decimal(2,0) not null);
create table bonus(
  ename    varchar(10),
  job      varchar(9),
  sal      decimal,
  comm     decimal);
create table salgrade(
  grade    decimal,
  losal    decimal,
  hisal    decimal);
create table dummy (
  dummy    decimal);
insert into dummy values (0);
insert into DEPT (DEPTNO, DNAME, LOC)
  select 10, &amp;#39;ACCOUNTING&amp;#39;, &amp;#39;NEW YORK&amp;#39; from dummy union all
  select 20, &amp;#39;RESEARCH&amp;#39;,   &amp;#39;DALLAS&amp;#39;   from dummy union all
  select 30, &amp;#39;SALES&amp;#39;,      &amp;#39;CHICAGO&amp;#39;  from dummy union all
  select 40, &amp;#39;OPERATIONS&amp;#39;, &amp;#39;BOSTON&amp;#39;   from dummy;
insert into emp (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
  select 7839, &amp;#39;KING&amp;#39;,   &amp;#39;PRESIDENT&amp;#39;, cast(null as integer), to_date(&amp;#39;17-11-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),    5000, cast(null as integer), 10 from dummy union all
  select 7698, &amp;#39;BLAKE&amp;#39;,  &amp;#39;MANAGER&amp;#39;,   7839, to_date(&amp;#39;1-5-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),      2850, cast(null as integer), 30 from dummy union all
  select 7782, &amp;#39;CLARK&amp;#39;,  &amp;#39;MANAGER&amp;#39;,   7839, to_date(&amp;#39;9-6-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),      2450, cast(null as integer), 10 from dummy union all
  select 7566, &amp;#39;JONES&amp;#39;,  &amp;#39;MANAGER&amp;#39;,   7839, to_date(&amp;#39;2-4-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),      2975, cast(null as integer), 20 from dummy union all
  select 7788, &amp;#39;SCOTT&amp;#39;,  &amp;#39;ANALYST&amp;#39;,   7566, to_date(&amp;#39;13-7-87&amp;#39;,&amp;#39;dd-mm-rr&amp;#39;) - 85,  3000, cast(null as integer), 20 from dummy union all
  select 7902, &amp;#39;FORD&amp;#39;,   &amp;#39;ANALYST&amp;#39;,   7566, to_date(&amp;#39;3-12-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),     3000, cast(null as integer), 20 from dummy union all
  select 7369, &amp;#39;SMITH&amp;#39;,  &amp;#39;CLERK&amp;#39;,     7902, to_date(&amp;#39;17-12-1980&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),     800, cast(null as integer), 20 from dummy union all
  select 7499, &amp;#39;ALLEN&amp;#39;,  &amp;#39;SALESMAN&amp;#39;,  7698, to_date(&amp;#39;20-2-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),     1600,  300, 30 from dummy union all
  select 7521, &amp;#39;WARD&amp;#39;,   &amp;#39;SALESMAN&amp;#39;,  7698, to_date(&amp;#39;22-2-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),     1250,  500, 30 from dummy union all
  select 7654, &amp;#39;MARTIN&amp;#39;, &amp;#39;SALESMAN&amp;#39;,  7698, to_date(&amp;#39;28-9-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),     1250, 1400, 30 from dummy union all
  select 7844, &amp;#39;TURNER&amp;#39;, &amp;#39;SALESMAN&amp;#39;,  7698, to_date(&amp;#39;8-9-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),      1500,    0, 30 from dummy union all
  select 7876, &amp;#39;ADAMS&amp;#39;,  &amp;#39;CLERK&amp;#39;,     7788, to_date(&amp;#39;13-7-87&amp;#39;, &amp;#39;dd-mm-rr&amp;#39;) - 51, 1100, cast(null as integer), 20 from dummy union all
  select 7900, &amp;#39;JAMES&amp;#39;,  &amp;#39;CLERK&amp;#39;,     7698, to_date(&amp;#39;3-12-1981&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),      950, cast(null as integer), 30 from dummy union all
  select 7934, &amp;#39;MILLER&amp;#39;, &amp;#39;CLERK&amp;#39;,     7782, to_date(&amp;#39;23-1-1982&amp;#39;,&amp;#39;dd-mm-yyyy&amp;#39;),     1300, cast(null as integer), 10 from dummy;
insert into salgrade
  select 1,  700, 1200 from dummy union all
  select 2, 1201, 1400 from dummy union all
  select 3, 1401, 2000 from dummy union all
  select 4, 2001, 3000 from dummy union all
  select 5, 3001, 9999 from dummy;
commit;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082-1&#34;&gt;&lt;a href=&#34;#1-Hacer-un-procedimiento-que-muestre-el-nombre-y-el-salario-del-empleado-cuyo-codigo-es-7082-1&#34; class=&#34;headerlink&#34; title=&#34;1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082&#34;&gt;&lt;/a&gt;1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE or replace PROCEDURE mostrar_7082() 
AS $$
DECLARE
    v_nombre emp.ename%type;
    v_salario emp.sal%type;
BEGIN
    select ename,sal into v_nombre,v_salario from emp where empno=7782;
    RAISE NOTICE &amp;#39;El nombre del empleado es %, y su salario es %&amp;#39;, v_nombre,v_salario;
END;
$$ LANGUAGE plpgsql;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/postgres-ejercicio2.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre-1&#34;&gt;&lt;a href=&#34;#2-Hacer-un-procedimiento-que-reciba-como-parametro-un-codigo-de-empleado-y-devuelva-su-nombre-1&#34; class=&#34;headerlink&#34; title=&#34;2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre&#34;&gt;&lt;/a&gt;2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;Create or replace procedure codigoanombreemp (p_codempleado emp.empno%type) 
AS $$
DECLARE
    v_nombre emp.ename%type;
BEGIN
    select ename into v_nombre from emp where empno=p_codempleado;
    RAISE NOTICE &amp;#39;El empleado con el código %, es %&amp;#39;, p_codempleado,v_nombre;
END;
$$ LANGUAGE plpgsql;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/images/postgres-ejercicio1.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
</content>
        <updated>2022-12-07T01:39:06.680Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/11/09/Interconexiones/</id>
        <title>Interconexiones entre Bases de Datos</title>
        <link rel="alternate" href="http://example.com/2022/11/09/Interconexiones/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/images/oracle-19c-logo.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Interconexion-entre-dos-bases-de-datos-Oracle&#34;&gt;&lt;a href=&#34;#Interconexion-entre-dos-bases-de-datos-Oracle&#34; class=&#34;headerlink&#34; title=&#34;Interconexión entre dos bases de datos Oracle.&#34;&gt;&lt;/a&gt;Interconexión entre dos bases de datos Oracle.&lt;/h2&gt;&lt;p&gt;Antes que nada debemos saber que para conectarnos a una base de datos, debemos tener activados los listener y seguidamente tener en el tsnames.ora la base de datos a la que queremos conectarnos, de esta manera:&lt;br&gt;sudo nano &amp;#x2F;opt&amp;#x2F;oracle&amp;#x2F;product&amp;#x2F;19c&amp;#x2F;dbhome_1&amp;#x2F;network&amp;#x2F;admin&amp;#x2F;tnsnames.ora&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ORCLCDB =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.122.20)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = ORCLCDB)
    )
  )

LISTENER_ORCLCDB =
  (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.122.20)(PORT = 1521))

ORACLESERV =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.122.168)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = ORCLCDB)
    )
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hemos creado una nueva conexión llamada ORACLESERV en el cual procederemos a ingresar la ip del servidor del que queremos recibir los datos, tras esto debemos crear en la otra máquina la tabla de ejemplo que queremos extraer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE armas (
codarma varchar2 (3),
nombre varchar2 (20),
fuerza number (2),
destreza number (2),
inteligencia number (2),
rareza varchar2 (10),
nivel number (2),
CONSTRAINT pk_armas PRIMARY KEY (codarma)
);

insert into armas values (&amp;#39;001&amp;#39;,&amp;#39;Espada Corta&amp;#39;,8,10,0,&amp;#39;D&amp;#39;,5);
insert into armas values (&amp;#39;002&amp;#39;,&amp;#39;Espada Larga&amp;#39;,10,10,0,&amp;#39;C&amp;#39;,8);
insert into armas values (&amp;#39;003&amp;#39;,&amp;#39;Espada Artorias&amp;#39;,24,18,20,&amp;#39;S&amp;#39;,30);
insert into armas values (&amp;#39;004&amp;#39;,&amp;#39;Hacha de Mano&amp;#39;,8,8,0,&amp;#39;D&amp;#39;,6);
insert into armas values (&amp;#39;005&amp;#39;,&amp;#39;Hacha de Gárgola&amp;#39;,14,14,0,&amp;#39;A&amp;#39;,15);
insert into armas values (&amp;#39;006&amp;#39;,&amp;#39;Hacha de Demonio&amp;#39;,46,0,0,&amp;#39;S&amp;#39;,40);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez hecho esto, &lt;strong&gt;nos vamos a la máquina en la que vamos a trabajar con la consulta&lt;/strong&gt;, debemos crear un enlace a la base de datos, el cual hemos predefinido como ORACLESERV:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;create database link ORACLESERVIDOR connect to antonio identified by antonio using &amp;#39;ORACLESERV&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Tras esto, viene una parte un poco compleja, ya que la tabla que vamos a consultar en el otro servidor viene relacionada, y a la hora de crear relaciones entre tablas no se puede especificar una base de datos remota en el DDL, entonces, cómo podemos hacer que esto funcione? bueno pues mi idea ha sido crear una vista materializada:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;create materialized view mv_armas as select codarma from armas@ORACLESERVIDOR;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Una vez hecho esto, procedemos a crear las tablas personaje y equipar, siendo una relación N,M.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE personaje (
codpersonaje varchar2 (3),
nombre varchar2 (15),
altura number (3,2),
peso number (3),
raza varchar2 (10),
CONSTRAINT pk_codpersonaje PRIMARY KEY (codpersonaje),
CONSTRAINT ck_codpersonaje CHECK (REGEXP_LIKE(codpersonaje,&amp;#39;^1.*$&amp;#39;))
);

insert into personaje values (&amp;#39;101&amp;#39;,&amp;#39;Solaire&amp;#39;,1.70,80,&amp;#39;humano&amp;#39;);
insert into personaje values (&amp;#39;102&amp;#39;,&amp;#39;Artorias&amp;#39;,1.90,90,&amp;#39;hueco&amp;#39;);
insert into personaje values (&amp;#39;103&amp;#39;,&amp;#39;Gargola&amp;#39;,3.10,680,&amp;#39;Gárgola&amp;#39;);

CREATE TABLE equipar (
codpersonaje varchar2 (3),
codarma varchar2 (3),
fecha date,
CONSTRAINT pk_equipar PRIMARY KEY (codpersonaje,codarma,fecha),
CONSTRAINT fk_codpersonaje FOREIGN KEY (codpersonaje) REFERENCES personaje (codpersonaje),
CONSTRAINT fk_codarma FOREIGN KEY (codarma) REFERENCES mv_armas(codarma);
);

insert into equipar values (&amp;#39;102&amp;#39;,&amp;#39;003&amp;#39;,to_date(&amp;#39;2011/02/11&amp;#39;,&amp;#39;YYYY/MM/DD&amp;#39;));
insert into equipar values (&amp;#39;103&amp;#39;,&amp;#39;005&amp;#39;,to_date(&amp;#39;2011/05/04&amp;#39;,&amp;#39;YYYY/MM/DD&amp;#39;));
insert into equipar values (&amp;#39;101&amp;#39;,&amp;#39;002&amp;#39;,to_date(&amp;#39;2011/06/03&amp;#39;,&amp;#39;YYYY/MM/DD&amp;#39;));
insert into equipar values (&amp;#39;103&amp;#39;,&amp;#39;002&amp;#39;,to_date(&amp;#39;2011/09/02&amp;#39;,&amp;#39;YYYY/MM/DD&amp;#39;));
insert into equipar values (&amp;#39;101&amp;#39;,&amp;#39;006&amp;#39;,to_date(&amp;#39;2011/08/03&amp;#39;,&amp;#39;YYYY/MM/DD&amp;#39;));
insert into equipar values (&amp;#39;102&amp;#39;,&amp;#39;004&amp;#39;,to_date(&amp;#39;2011/07/01&amp;#39;,&amp;#39;YYYY/MM/DD&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¡¡Mucho ojo!! la restricción que he establecido en equipar, que es la foreign key que relaciona el código de armas con nuestra base de datos, llamará a la view que hemos creado y contendrá los datos de la consulta al servidor externo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/sql-remoto.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/sql-remoto2.png&#34; alt=&#34;remoto&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Interconexion-entre-dos-bases-de-datos-Postgres&#34;&gt;&lt;a href=&#34;#Interconexion-entre-dos-bases-de-datos-Postgres&#34; class=&#34;headerlink&#34; title=&#34;Interconexión entre dos bases de datos Postgres.&#34;&gt;&lt;/a&gt;Interconexión entre dos bases de datos Postgres.&lt;/h2&gt;&lt;p&gt;Primero vamos a modificar el fichero &amp;#x2F;etc&amp;#x2F;postgresql&amp;#x2F;13&amp;#x2F;main&amp;#x2F;postgresql.conf para abrir la escucha a la ip que quiera conectarse:&lt;br&gt;&lt;code&gt;listen_addresses = &amp;#39;*&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Modificamos el fichero &amp;#x2F;etc&amp;#x2F;postgresql&amp;#x2F;13&amp;#x2F;main&amp;#x2F;pg_hba.conf, y aladimos la siguiente línea:&lt;br&gt;&lt;code&gt;host    all             all             192.168.122.0/24        md5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Procedemos a reiniciar Postgres para efectuar los cambios:&lt;br&gt;&lt;code&gt;sudo systemctl restart postgresql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego vamos a crear la base de datos souls, luego vamos a darle permiso al usuario antonio2 para poder manejar la base de datos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;postgres=# create database souls
postgres-# ;
CREATE DATABASE
GRANT ALL PRIVILEGES ON DATABASE souls TO antonio2;
postgres=# grant connect on database souls to antonio2;
GRANT
postgres=# grant usage on schema public to antonio2;
GRANT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el otro servidor establecemos la configuración de antonio1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;postgres=# create user antonio1 with password &amp;#39;antonio1&amp;#39;;
CREATE ROLE
postgres=# create database souls;
CREATE DATABASE
GRANT ALL PRIVILEGES ON DATABASE souls TO antonio1;
postgres=# grant connect on database souls to antonio1;
GRANT
postgres=# grant usage on schema public to antonio1;
GRANT
postgres=# \c souls;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora vamos a instalar el paquete que nos permitirá realizar el dblink:&lt;br&gt;&lt;code&gt;sudo apt install postgresql-contrib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;De modo que si hacemos una consulta con dblink especificando el host, usuario y base de datos del que se habla, podremos sacar la información de las bases de datos respectivamente.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select * from dblink(&amp;#39;dbname=souls host=192.168.122.168 user=antonio2 password=antonio2&amp;#39;, &amp;#39;select nombre from armas&amp;#39;) as armas (Nombre VARCHAR);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/postgres-postgres.png&#34; alt=&#34;Descripción de la imagen&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Interconexion-entre-bases-de-datos-Oracle-y-Postgres&#34;&gt;&lt;a href=&#34;#Interconexion-entre-bases-de-datos-Oracle-y-Postgres&#34; class=&#34;headerlink&#34; title=&#34;Interconexión entre bases de datos Oracle y Postgres.&#34;&gt;&lt;/a&gt;Interconexión entre bases de datos Oracle y Postgres.&lt;/h2&gt;&lt;p&gt;En nuestro caso la paquetería que necesitamos para conectar Oracle a Postgres es la de Debian Bullseye, por tanto el comando sería el siguiente:&lt;br&gt;&lt;code&gt;sudo apt install odbc-postgresql unixodbc -y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ahora vamos a entrar en &amp;#x2F;etc&amp;#x2F;odbc.ini y vamos a ingresar los siguientes parámetros adaptándolos a nuestro usuario, host y base de datos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[PSQLA]
Debug = 0
CommLog = 0
ReadOnly = 1
Driver = PostgreSQL ANSI
Servername = 192.168.122.168
Username = antonio2
Password = antonio2
Port = 5432
Database = souls
Trace = 0
TraceFile = /tmp/sql.log

[PSQLU]
Debug = 0
CommLog = 0
ReadOnly = 0
Driver = PostgreSQL Unicode
Servername = 192.168.122.168
Username = antonio2
Password = antonio2
Port = 5432
Database = souls
Trace = 0
TraceFile = /tmp/sql.log

[Default]
Driver = /usr/lib/x86_64-linux-gnu/odbc/liboplodbcS.so
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora vamos a comprobar el fichero &amp;#x2F;etc&amp;#x2F;ocdbinst.ini y debe venir configurado como se muestra abajo.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[PostgreSQL ANSI]
Description=PostgreSQL ODBC driver (ANSI version)
Driver=psqlodbca.so
Setup=libodbcpsqlS.so
Debug=0
CommLog=1
UsageCount=1

[PostgreSQL Unicode]
Description=PostgreSQL ODBC driver (Unicode version)
Driver=psqlodbcw.so
Setup=libodbcpsqlS.so
Debug=0
CommLog=1
UsageCount=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos comprobar la configuración ingresando los siguientes comandos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;odbcinst -q -d
    [PostgreSQL ANSI]
    [PostgreSQL Unicode]


odbcinst -q -s
    [PSQLA]
    [PSQLU]
    [Default]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ejecutamos &lt;code&gt;isql -v PSQLU&lt;/code&gt; y si todo ha ido bien nos devolverá esto:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+---------------------------------------+
| Connected!                            |
|                                       |
| sql-statement                         |
| help [tablename]                      |
| quit                                  |
|                                       |
+---------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación vamos a &lt;code&gt;/opt/oracle/product/19c/dbhome_1/hs/admin/initPSQLU.ora&lt;/code&gt; e ingresamos los siguientes datos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HS_FDS_CONNECT_INFO = PSQLU
HS_FDS_TRACE_LEVEL = Debug
HS_FDS_SHAREABLE_NAME = /usr/lib/x86_64-linux-gnu/odbc/psqlodbcw.so
HS_LANGUAGE = AMERICAN_AMERICA.WE8ISO8859P1
set ODBCINI=/etc/odbc.ini
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vamos al listener.ora e ingresamos los siguentes parámetros:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SID_LIST_LISTENER =
 (SID_LIST =
  (SID_DESC =
   (GLOBAL_DBNAME = ORCLCDB)
   (ORACLE_HOME = /opt/oracle/product/19c/dbhome_1)
   (SID_NAME = ORCLCDB)
  )
  (SID_DESC =
    (SID_NAME = PSQLU)
    (PROGRAM = dg4odbc)
    (ORACLE_HOME = /opt/oracle/product/19c/dbhome_1)
  )
 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora realizaremos un lsnrctl stop y lisnrctl start, y nos debe salir un mensaje como el siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Service &amp;quot;PSQLU&amp;quot; has 1 instance(s).
  Instance &amp;quot;PSQLU&amp;quot;, status UNKNOWN, has 1 handler(s) for this service...
Service &amp;quot;orcl&amp;quot; has 1 instance(s).
  Instance &amp;quot;orcl&amp;quot;, status UNKNOWN, has 1 handler(s) for this service...
The command completed successfully
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora nos vamos al tnsnames.ora y añadimos lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PSQLU =
 (DESCRIPTION =
 (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))
   (CONNECT_DATA = (SID = PSQLU))
   (HS = OK)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En localhost estamos especificando que la ip de la máquina sería la misma en la que está alojado el servicio postgre, esto es debido a que se redirecciona a través de la configuración en odbc.ini entonces ya tan solo quedaría conceder permisos de conexión publica de la base de datos a antonio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRANT CREATE PUBLIC DATABASE LINK to antonio;

Concesion terminada correctamente.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora solo nos queda realizar la conexión:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PUBLIC DATABASE LINK CONEXIONPOSTGRES2
CONNECT TO &amp;quot;antonio2&amp;quot;
IDENTIFIED BY &amp;quot;antonio2&amp;quot;
USING &amp;#39;PSQLU&amp;#39;;

Enlace con la base de datos creado.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comprobamos que se pueda consultar el nombre de las armas en &lt;strong&gt;CONEXIONPOSTGRES2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/oracle-postgres.png&#34; alt=&#34;Descripción de la imagen&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Interconexion-entre-bases-de-datos-Postgres-y-Oracle&#34;&gt;&lt;a href=&#34;#Interconexion-entre-bases-de-datos-Postgres-y-Oracle&#34; class=&#34;headerlink&#34; title=&#34;Interconexión entre bases de datos Postgres y Oracle.&#34;&gt;&lt;/a&gt;Interconexión entre bases de datos Postgres y Oracle.&lt;/h2&gt;&lt;p&gt;Primero vamos a instalar unos paquetes que nos servirán tanto para establecer la conexión con Oracle como a la hora de compilar el Makefile que necesitaremos más adelante:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt install git build-essential libaio1 postgresql-server-dev-all -y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Para realizar la interconexión entre Postgres y Oracle necesitaremos software de terceros, en mi caso vamos a descargar los paquetes que se encuentran en el siguiente enlace:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1UmBNjVLffaj-hXDXdi6hPGpz6CIZr8eN/view?usp=share_link&#34;&gt;https://drive.google.com/file/d/1UmBNjVLffaj-hXDXdi6hPGpz6CIZr8eN/view?usp=share_link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En él se encuentran los paquetes en formato.deb, del cual me ocupé de transformar con alien.&lt;/p&gt;
&lt;p&gt;Ahora procedemos a instalar los paquetes que adaptarán el formato sqlplus:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dpkg -i oracle-instantclient19.5-devel_19.5.0.0.0-2_amd64.deb
sudo dpkg -i oracle-instantclient19.5-basic_19.5.0.0.0-2_amd64.deb
sudo dpkg -i oracle-instantclient19.5-tools_19.5.0.0.0-2_amd64.deb
sudo dpkg -i oracle-instantclient19.5-sqlplus_19.5.0.0.0-2_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora vamos a clonar el repositorio con el que trabajaremos para establecer la conexión de Postgres a Oracle:&lt;/p&gt;
&lt;p&gt;git clone &lt;a href=&#34;https://github.com/laurenz/oracle_fdw.git&#34;&gt;https://github.com/laurenz/oracle_fdw.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahora en nuestra máquina postgres necesitaremos crear las variables de entorno de Oracle, para ello ingresaremos lo siguiente al final de nuestro .bashrc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano ~/.bashrc

export ORACLE_HOME=&amp;quot;/usr/lib/oracle/19.5/client64&amp;quot;
export LD_LIBRARY_PATH=&amp;quot;/usr/lib/oracle/19.5/client64/lib&amp;quot;
export PATH=$ORACLE_HOME:$PATH
export USE_PGXS=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora vamos a generar el makefile ejecutando un &lt;code&gt;make&lt;/code&gt; dentro del directorio que hemos clonado.&lt;/p&gt;
&lt;p&gt;UNa vez hecho esto, ante de proceder a instalar el binario, debamo incluir las siguientes líneas a nuestro makefile.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PG_CPPFLAGS = -I&amp;quot;$(ORACLE_HOME)/sdk/include&amp;quot; -I&amp;quot;$(ORACLE_HOME)/oci/include&amp;quot; -I&amp;quot;$(ORACLE_HOME)/rdbms/public&amp;quot; -I&amp;quot;$(ORACLE_HOME)/&amp;quot; $(FIN&amp;gt;

SHLIB_LINK = -L&amp;quot;$(ORACLE_HOME)/&amp;quot; -L&amp;quot;$(ORACLE_HOME)/bin&amp;quot; -L&amp;quot;$(ORACLE_HOME)/lib&amp;quot; -L&amp;quot;$(ORACLE_HOME)/lib/amd64&amp;quot; $(FIND_LDFLAGS) -l$(ORACL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora podemos ejecutar un &lt;code&gt;make install&lt;/code&gt; sin errores ya que las dependencias necesarias para la instalación fueron descargadas con anterioridad.&lt;/p&gt;
&lt;p&gt;Luego entramos en nuestra base de datos con el usuario postgres para crear nuestro enlace a Oracle, debemos especificar la ip que tendrá el sevidor y el nombre de la base de datos que en nuestro caso será el por defecto ‘ORCLCDB’.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE SERVER oracleantonio FOREIGN DATA WRAPPER oracle_fdw OPTIONS(dbserver &amp;#39;//192.168.122.168:1521/ORCLCDB&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez hecho esto vamos a enlazar la conexión de nuestro oracleantonio con el usuario que tenga acceso a los registros de la tabla armas, de forma que quedaría de la siguiente manera:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create user mapping for postgres server oracleantonio options(user &amp;#39;antonio&amp;#39;,password &amp;#39;antonio&amp;#39;);
DROP user mapping for postgres server oracleantonio; (En caso de que haya algún tipo de error).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crearemos el esqueleto de la tabla que necesitamos en la base de datos pero sin restricciones ni unique, ya que colisionan con la ejecución de la conexión remota, solo necesitaremos los campos que vayan a ser rellenados:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FOREIGN TABLE personaje (
codpersonaje varchar (3),
nombre varchar (15),
altura numeric (3,2),
peso numeric (3),
raza varchar (10) DEFAULT (&amp;#39;Humano&amp;#39;))
SERVER oracleantonio OPTIONS(schema &amp;#39;ANTONIO&amp;#39;, table &amp;#39;PERSONAJE&amp;#39;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora solo nos queda realizar la consulta y podemos comprobar como esta se resuelve con éxito.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/postgres-oracle.png&#34; alt=&#34;Descripción de la imagen&#34;&gt;&lt;/p&gt;
</content>
        <updated>2022-11-09T19:27:01.893Z</updated>
    </entry>
</feed>

{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"sistemas operativos\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/11/16/Compilar-linux-a-medida/",
            "url": "http://example.com/2022/11/16/Compilar-linux-a-medida/",
            "title": "Configurar kernel a medida",
            "date_published": "2022-11-16T21:49:54.792Z",
            "content_html": "<p><img src=\"/images/linux-6.0.jpg\" alt=\"Descripción de la imagen\"></p>\n<p>Comenzaremos creando una carpeta que nos sirva de entorno de trabajo</p>\n<p><code>mkdir kernel &amp;&amp; cd kernel</code></p>\n<p>Instalamos las dependencias que nos ayudarán a compilar el kernel, el cual nos ahorrará errores en la compilación:</p>\n<p><code>sudo apt install build-essential flex nbison openssl libssl-dev dkms libncurses-dev ncurses-dev qtbase5-dev libelf-dev</code></p>\n<p>Nos vamos ahora a kernel.org a descargarnos la última versión del kernel de linux.</p>\n<p>Una vez descargado el kernel lo descomprimimos con el comando tar -xvf linux-6.0.7.tar.gz, ingresamos dentro y vemos que entre muchos archivos, encontramos un makefile, entramos dentro y encontraremos el archivo EXTRAVERSION, el cual pondremos una versión para poder llevar un control de versiones.</p>\n<p>Entramos dentro del directorio descomprimido y procedemos a generar el <code>make oldconfig</code> que creará el archivo .config con los módulos que deberemos compilar, intentamos contestar a las preguntas de forma negativa para que no genere módulos opcionales.</p>\n<p>Una vez hecho esto debemos de adaptar los módulos que está utilizando nuestra máquina para compilar el kernel a medida, entonces utilizaremos un <code>make localyesconfig</code></p>\n<pre><code>╭─antonio@debian ~/Programas/kernel/linux-6.0.7  \n╰─➤  egrep &#39;=y&#39; .config | wc -l                                                                                                 130 ↵\n1934\n╭─antonio@debian ~/Programas/kernel/linux-6.0.7  \n╰─➤  egrep &#39;=m&#39; .config | wc -l\n3\n</code></pre>\n<p>Una vez hecho esto procederemos a probar nuestro kernel a medida <code>make -j8 bindeb-pkg</code> pudiendo así compilar el kernel, le otorgaremos 8 jobs y si agregamos un time <code>time make -j8 bindeb-pkg</code> podemos ver la duración que ha tardado el sistema en compilarlo.</p>\n<p>Reiniciamos nuestra máquina y entramos en el nuevo kernel, utilizamos <code>uname -r</code></p>\n<p>Luego volvemos a nuestro kernel, y en concreto a nuestro espacio de trabajo, ejecutamos un <code>make clean</code> para eliminar los ‘residuos’ generados tras al compilación, y hacemos un control de versiones del .config, como nos funcionó la primera versión realizamos un <code>cp .config ../v1.config</code></p>\n<p><img src=\"/images/xconfig.png\" alt=\"Descripción de la imagen\"></p>\n",
            "tags": [
                "Sistemas Operativos"
            ]
        }
    ]
}
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Hexo • Posts by &#34;sistemas operativos&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-11-16T21:49:54.792Z</updated>
    <category term="Servicios de Red e Internet" />
    <category term="Sistemas Operativos" />
    <category term="Seguridad" />
    <entry>
        <id>http://example.com/2022/11/16/Compilar-linux-a-medida/</id>
        <title>Configurar kernel a medida</title>
        <link rel="alternate" href="http://example.com/2022/11/16/Compilar-linux-a-medida/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/images/linux-6.0.jpg&#34; alt=&#34;Descripción de la imagen&#34;&gt;&lt;/p&gt;
&lt;p&gt;Comenzaremos creando una carpeta que nos sirva de entorno de trabajo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mkdir kernel &amp;amp;&amp;amp; cd kernel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instalamos las dependencias que nos ayudarán a compilar el kernel, el cual nos ahorrará errores en la compilación:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt install build-essential flex nbison openssl libssl-dev dkms libncurses-dev ncurses-dev qtbase5-dev libelf-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nos vamos ahora a kernel.org a descargarnos la última versión del kernel de linux.&lt;/p&gt;
&lt;p&gt;Una vez descargado el kernel lo descomprimimos con el comando tar -xvf linux-6.0.7.tar.gz, ingresamos dentro y vemos que entre muchos archivos, encontramos un makefile, entramos dentro y encontraremos el archivo EXTRAVERSION, el cual pondremos una versión para poder llevar un control de versiones.&lt;/p&gt;
&lt;p&gt;Entramos dentro del directorio descomprimido y procedemos a generar el &lt;code&gt;make oldconfig&lt;/code&gt; que creará el archivo .config con los módulos que deberemos compilar, intentamos contestar a las preguntas de forma negativa para que no genere módulos opcionales.&lt;/p&gt;
&lt;p&gt;Una vez hecho esto debemos de adaptar los módulos que está utilizando nuestra máquina para compilar el kernel a medida, entonces utilizaremos un &lt;code&gt;make localyesconfig&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;╭─antonio@debian ~/Programas/kernel/linux-6.0.7  
╰─➤  egrep &amp;#39;=y&amp;#39; .config | wc -l                                                                                                 130 ↵
1934
╭─antonio@debian ~/Programas/kernel/linux-6.0.7  
╰─➤  egrep &amp;#39;=m&amp;#39; .config | wc -l
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez hecho esto procederemos a probar nuestro kernel a medida &lt;code&gt;make -j8 bindeb-pkg&lt;/code&gt; pudiendo así compilar el kernel, le otorgaremos 8 jobs y si agregamos un time &lt;code&gt;time make -j8 bindeb-pkg&lt;/code&gt; podemos ver la duración que ha tardado el sistema en compilarlo.&lt;/p&gt;
&lt;p&gt;Reiniciamos nuestra máquina y entramos en el nuevo kernel, utilizamos &lt;code&gt;uname -r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Luego volvemos a nuestro kernel, y en concreto a nuestro espacio de trabajo, ejecutamos un &lt;code&gt;make clean&lt;/code&gt; para eliminar los ‘residuos’ generados tras al compilación, y hacemos un control de versiones del .config, como nos funcionó la primera versión realizamos un &lt;code&gt;cp .config ../v1.config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/xconfig.png&#34; alt=&#34;Descripción de la imagen&#34;&gt;&lt;/p&gt;
</content>
        <category term="Sistemas Operativos" />
        <updated>2022-11-16T21:49:54.792Z</updated>
    </entry>
</feed>
